{"ast":null,"code":"import _regeneratorRuntime from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useCallback}from\"react\";import{useMutation,useQuery,useLazyQuery}from\"@apollo/client\";import mutation from\"../../../GQL/mutations/editUser\";import query from\"../../../GQL/queries/CurrentUser\";import styles from\"./FriendList.module.css\";import convoExists from\"../../../GQL/queries/convoExists\";import{useAppSelector,useAppDispatch}from\"../../../redux/hooks\";import useChatRoom from\"../../CHAT/useChatRoom\";import addConversationMutation from\"../../../GQL/mutations/addConversation\";import FadeIn from\"react-fade-in\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FriendList=function FriendList(_ref){var friendListOpen=_ref.friendListOpen,setFriendListOpen=_ref.setFriendListOpen;var onlineUsers=useAppSelector(function(state){return state.onlineUsers.value;});var currentUser=useAppSelector(function(state){return state.currentUser;});var _useChatRoom=useChatRoom(),combineAddresses=_useChatRoom.combineAddresses;var _useMutation=useMutation(mutation),_useMutation2=_slicedToArray(_useMutation,1),editUser=_useMutation2[0];var _useMutation3=useMutation(addConversationMutation),_useMutation4=_slicedToArray(_useMutation3,1),addConversation=_useMutation4[0];var _useQuery=useQuery(query),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;var room=useAppSelector(function(state){return state.currentRoom.value;});var _useState=useState(null),_useState2=_slicedToArray(_useState,2),hash=_useState2[0],setHash=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),convoData=_useState4[0],setConvoData=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),convoData2=_useState6[0],setConvoData2=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),friends=_useState8[0],setFriends=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),friendId=_useState10[0],setFriendId=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),clicked=_useState12[0],setClicked=_useState12[1];var _useLazyQuery=useLazyQuery(convoExists,{fetchPolicy:\"no-cache\",// Used for first execution\nnextFetchPolicy:\"no-cache\",// Used for subsequent executions\nonCompleted:function(){var _onCompleted=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",setConvoData(convoExistsData));case 1:case\"end\":return _context.stop();}}},_callee);}));function onCompleted(){return _onCompleted.apply(this,arguments);}return onCompleted;}()}),_useLazyQuery2=_slicedToArray(_useLazyQuery,2),checkIfConvoExists=_useLazyQuery2[0],_useLazyQuery2$=_useLazyQuery2[1],convoExistsLoading=_useLazyQuery2$.loading,convoExistsError=_useLazyQuery2$.error,convoExistsData=_useLazyQuery2$.data,refetch=_useLazyQuery2$.refetch;/* -------------------------------------------------------------------------- */useEffect(function(){setFriends(currentUser.friends);console.log(\"friends online\",onlineUsers);});/* -------------------------------------------------------------------------- */var deleteFriend=function deleteFriend(friendId){editUser({variables:{id:currentUser.id,deleteFriend:friendId},refetchQueries:[{query:query}],awaitRefetchQueries:true}).then(editUser({variables:{id:currentUser.id,deleteConversation:friendId},refetchQueries:[{query:query}],awaitRefetchQueries:true}).catch(function(err){var _err$graphQLErrors;var errors=(_err$graphQLErrors=err.graphQLErrors)===null||_err$graphQLErrors===void 0?void 0:_err$graphQLErrors.map(function(error){return error.message;});console.log(errors);})).catch(function(err){var _err$graphQLErrors2;var errors=(_err$graphQLErrors2=err.graphQLErrors)===null||_err$graphQLErrors2===void 0?void 0:_err$graphQLErrors2.map(function(error){return error.message;});console.log(errors);});};/* -------------------------------------------------------------------------- */ /* -------------------------------------------------------------------------- */var addConvoToUser=function addConvoToUser(clickedFriendId){editUser({variables:{id:currentUser.id,addConversation:clickedFriendId},refetchQueries:[{query:query}],awaitRefetchQueries:true}).catch(function(err){var _err$graphQLErrors3;var errors=(_err$graphQLErrors3=err.graphQLErrors)===null||_err$graphQLErrors3===void 0?void 0:_err$graphQLErrors3.map(function(error){return error.message;});console.log(errors);});};/* -------------------------------------------------------------------------- */var startConversation=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(convoId,clickedFriendId){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:checkIfConvoExists({variables:{convoId:convoId}});addConvoToUser(clickedFriendId);setHash(convoId);setClicked(!clicked);setFriendId(clickedFriendId);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function startConversation(_x,_x2){return _ref2.apply(this,arguments);};}();useEffect(function(){if(convoExistsData&&convoExistsLoading===false){//convoData acts as the old data\n//so making sure only true if the NEW data is not the same as the OLD data\nif(convoExistsData!==convoData){console.log(\"query\",convoExistsData);if(convoExistsData.conversationExists!==null){console.log(\"User Exists\");setHash(null);setConvoData2(convoData);}else if(convoExistsData.conversationExists===null){console.log(\"DNE\");/* ------------------------ creating new conversation ----------------------- */addConversation({variables:{convoId:hash},refetchQueries:[checkIfConvoExists({variables:{convoId:hash},fetchPolicy:\"no-cache\",nextFetchPolicy:\"no-cache\"})],awaitRefetchQueries:true}).catch(function(err){var _err$graphQLErrors4;var errors=(_err$graphQLErrors4=err.graphQLErrors)===null||_err$graphQLErrors4===void 0?void 0:_err$graphQLErrors4.map(function(error){return error.message;});console.log(errors);});}}}},[clicked,convoExistsData!==undefined&&convoExistsData]);/* -------------------------------------------------------------------------- */var renderFriends=function renderFriends(){var converstationIds=Array.from(currentUser.conversations,function(x){return x.id;});console.log(\"FRIENDS FINAL\",friends);if(friends){return friends.map(function(friend,index){return/*#__PURE__*/_jsxs(\"div\",{className:styles.friendContainer,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.nameEmailContainer,children:[friend.profilePic?/*#__PURE__*/_jsx(\"img\",{className:styles.friendProfilePic,src:friend.profilePic,alt:\"\"}):/*#__PURE__*/_jsx(\"img\",{className:styles.friendProfilePic,src:\"https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8cHJvZmlsZXxlbnwwfHwwfHw%3D&w=1000&q=80\",alt:\"\"}),/*#__PURE__*/_jsx(\"h3\",{className:styles.name,children:friend.email}),onlineUsers.includes(friend.id)?/*#__PURE__*/_jsx(\"div\",{className:styles.online}):/*#__PURE__*/_jsx(\"div\",{className:styles.offline})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.buttons,children:[!converstationIds.includes(friend.id)?/*#__PURE__*/_jsx(\"button\",{className:styles.startChat,onClick:function onClick(){return[// setHash(combineAddresses(user.id, index)),\nstartConversation(combineAddresses(currentUser.id,friend.id),friend.id)];},children:\"Start a Chat\"}):/*#__PURE__*/_jsx(\"button\",{className:styles.chatStarted// onClick={() => [\n//   // setHash(combineAddresses(user.id, index)),\n//   startConversation(\n//     combineAddresses(currentUser.id, friend.id),\n//     friend.id\n//   ),\n// ]}\n,children:\"Start a Chat\"}),/*#__PURE__*/_jsx(\"button\",{className:styles.delete,onClick:function onClick(){return[deleteFriend(friend.id)];},children:\"Delete\"})]})]},index);});}};/* -------------------------------------------------------------------------- */return/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.titleContainer,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.backArrowContainer,onClick:function onClick(){return setFriendListOpen(false);},children:[/*#__PURE__*/_jsx(\"p\",{children:\"Find Friends\"}),/*#__PURE__*/_jsx(\"span\",{className:styles.backArrow,children:\" \\u21AA \"})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Friends\"})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.friendListContainer,children:/*#__PURE__*/_jsx(\"div\",{className:styles.friendListContainerCenter,children:/*#__PURE__*/_jsx(FadeIn,{children:renderFriends()})})})]});};export default FriendList;","map":{"version":3,"sources":["/Users/omarragab/Documents/test/launchFeb/client/src/components/Friends/FriendList/FriendList.js"],"names":["React","useState","useEffect","useCallback","useMutation","useQuery","useLazyQuery","mutation","query","styles","convoExists","useAppSelector","useAppDispatch","useChatRoom","addConversationMutation","FadeIn","FriendList","friendListOpen","setFriendListOpen","onlineUsers","state","value","currentUser","combineAddresses","editUser","addConversation","loading","error","data","room","currentRoom","hash","setHash","convoData","setConvoData","convoData2","setConvoData2","friends","setFriends","friendId","setFriendId","clicked","setClicked","fetchPolicy","nextFetchPolicy","onCompleted","convoExistsData","checkIfConvoExists","convoExistsLoading","convoExistsError","refetch","console","log","deleteFriend","variables","id","refetchQueries","awaitRefetchQueries","then","deleteConversation","catch","err","errors","graphQLErrors","map","message","addConvoToUser","clickedFriendId","startConversation","convoId","conversationExists","undefined","renderFriends","converstationIds","Array","from","conversations","x","friend","index","friendContainer","nameEmailContainer","profilePic","friendProfilePic","name","email","includes","online","offline","buttons","startChat","chatStarted","delete","container","titleContainer","backArrowContainer","backArrow","friendListContainer","friendListContainerCenter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../../GQL/mutations/editUser\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport styles from \"./FriendList.module.css\";\nimport convoExists from \"../../../GQL/queries/convoExists\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport useChatRoom from \"../../CHAT/useChatRoom\";\nimport addConversationMutation from \"../../../GQL/mutations/addConversation\";\nimport FadeIn from \"react-fade-in\";\n\nconst FriendList = ({ friendListOpen, setFriendListOpen }) => {\n  const onlineUsers = useAppSelector((state) => state.onlineUsers.value);\n  const currentUser = useAppSelector((state) => state.currentUser);\n  const { combineAddresses } = useChatRoom();\n  const [editUser] = useMutation(mutation);\n  const [addConversation] = useMutation(addConversationMutation);\n  let { loading, error, data } = useQuery(query);\n  const room = useAppSelector((state) => state.currentRoom.value);\n  const [hash, setHash] = useState(null);\n  const [convoData, setConvoData] = useState(null);\n  const [convoData2, setConvoData2] = useState(\"\");\n  const [friends, setFriends] = useState([]);\n  const [friendId, setFriendId] = useState(\"\");\n  const [clicked, setClicked] = useState(false);\n\n  let [\n    checkIfConvoExists,\n    {\n      loading: convoExistsLoading,\n      error: convoExistsError,\n      data: convoExistsData,\n      refetch,\n    },\n  ] = useLazyQuery(convoExists, {\n    fetchPolicy: \"no-cache\", // Used for first execution\n    nextFetchPolicy: \"no-cache\", // Used for subsequent executions\n    onCompleted: async () => setConvoData(convoExistsData),\n  });\n\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    setFriends(currentUser.friends);\n    console.log(\"friends online\", onlineUsers);\n  });\n  /* -------------------------------------------------------------------------- */\n\n  const deleteFriend = (friendId) => {\n    editUser({\n      variables: {\n        id: currentUser.id,\n        deleteFriend: friendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    })\n      .then(\n        editUser({\n          variables: {\n            id: currentUser.id,\n            deleteConversation: friendId,\n          },\n          refetchQueries: [{ query: query }],\n          awaitRefetchQueries: true,\n        }).catch((err) => {\n          const errors = err.graphQLErrors?.map((error) => error.message);\n\n          console.log(errors);\n        })\n      )\n      .catch((err) => {\n        const errors = err.graphQLErrors?.map((error) => error.message);\n\n        console.log(errors);\n      });\n  };\n  /* -------------------------------------------------------------------------- */\n  /* -------------------------------------------------------------------------- */\n  const addConvoToUser = (clickedFriendId) => {\n    editUser({\n      variables: {\n        id: currentUser.id,\n        addConversation: clickedFriendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    }).catch((err) => {\n      const errors = err.graphQLErrors?.map((error) => error.message);\n\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  const startConversation = async (convoId, clickedFriendId) => {\n    checkIfConvoExists({\n      variables: {\n        convoId: convoId,\n      },\n    });\n    addConvoToUser(clickedFriendId);\n    setHash(convoId);\n    setClicked(!clicked);\n    setFriendId(clickedFriendId);\n  };\n\n  useEffect(() => {\n    if (convoExistsData && convoExistsLoading === false) {\n      //convoData acts as the old data\n      //so making sure only true if the NEW data is not the same as the OLD data\n      if (convoExistsData !== convoData) {\n        console.log(\"query\", convoExistsData);\n        if (convoExistsData.conversationExists !== null) {\n          console.log(\"User Exists\");\n\n          setHash(null);\n          setConvoData2(convoData);\n        } else if (convoExistsData.conversationExists === null) {\n          console.log(\"DNE\");\n          /* ------------------------ creating new conversation ----------------------- */\n          addConversation({\n            variables: {\n              convoId: hash,\n            },\n            refetchQueries: [\n              checkIfConvoExists({\n                variables: {\n                  convoId: hash,\n                },\n                fetchPolicy: \"no-cache\",\n                nextFetchPolicy: \"no-cache\",\n              }),\n            ],\n\n            awaitRefetchQueries: true,\n          }).catch((err) => {\n            const errors = err.graphQLErrors?.map((error) => error.message);\n\n            console.log(errors);\n          });\n        }\n      }\n    }\n  }, [clicked, convoExistsData !== undefined && convoExistsData]);\n  /* -------------------------------------------------------------------------- */\n\n  const renderFriends = () => {\n    const converstationIds = Array.from(currentUser.conversations, (x) => x.id);\n    console.log(\"FRIENDS FINAL\", friends);\n    if (friends) {\n      return friends.map((friend, index) => {\n        return (\n          <div key={index} className={styles.friendContainer}>\n            <div className={styles.nameEmailContainer}>\n              {friend.profilePic ? (\n                <img\n                  className={styles.friendProfilePic}\n                  src={friend.profilePic}\n                  alt=\"\"\n                />\n              ) : (\n                <img\n                  className={styles.friendProfilePic}\n                  src=\"https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8cHJvZmlsZXxlbnwwfHwwfHw%3D&w=1000&q=80\"\n                  alt=\"\"\n                />\n              )}\n              <h3 className={styles.name}>{friend.email}</h3>\n              {onlineUsers.includes(friend.id) ? (\n                <div className={styles.online}></div>\n              ) : (\n                <div className={styles.offline}></div>\n              )}\n            </div>\n\n            {/* <h1>{friend.id}</h1> */}\n            <div className={styles.buttons}>\n              {!converstationIds.includes(friend.id) ? (\n                <button\n                  className={styles.startChat}\n                  onClick={() => [\n                    // setHash(combineAddresses(user.id, index)),\n                    startConversation(\n                      combineAddresses(currentUser.id, friend.id),\n                      friend.id\n                    ),\n                  ]}\n                >\n                  Start a Chat\n                </button>\n              ) : (\n                <button\n                  className={styles.chatStarted}\n                  // onClick={() => [\n                  //   // setHash(combineAddresses(user.id, index)),\n                  //   startConversation(\n                  //     combineAddresses(currentUser.id, friend.id),\n                  //     friend.id\n                  //   ),\n                  // ]}\n                >\n                  Start a Chat\n                </button>\n              )}\n              <button\n                className={styles.delete}\n                onClick={() => [deleteFriend(friend.id)]}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        );\n      });\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleContainer}>\n        <div\n          className={styles.backArrowContainer}\n          onClick={() => setFriendListOpen(false)}\n        >\n          <p>Find Friends</p>\n          <span className={styles.backArrow}> &#x21AA; </span>\n        </div>\n\n        <h3>Friends</h3>\n      </div>\n      <div className={styles.friendListContainer}>\n        <div className={styles.friendListContainerCenter}>\n          <FadeIn>{renderFriends()}</FadeIn>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FriendList;\n"]},"metadata":{},"sourceType":"module"}