{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport addConversationMutation from \"../../GQL/mutations/addConversation\";\nimport editMessageMutation from \"../../GQL/mutations/editMessage\";\nimport getMessagesQuery from \"../../GQL/queries/getMessages\";\nimport useChatRoom from \"./useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport { setPreviousMessages } from \"../../redux/features/previousMessagesSlice\";\n\nconst useMessages = () => {\n  _s();\n\n  const currentUser = useAppSelector(state => state.currentUser);\n  const room = useAppSelector(state => state.currentRoom.value);\n  let {\n    loading: loadingMessages,\n    error: errorMessages,\n    data: dataMessages,\n    refetch: refetchMessages\n  } = useQuery(getMessagesQuery);\n  const [messageList, setMessageList] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n  const [addConversation] = useMutation(addConversationMutation);\n  const [editMessage] = useMutation(editMessageMutation);\n  const dispatch = useAppDispatch(); // let [\n  //   getCurrentFriendMessages,\n  //   {\n  //     loading: messagesLoading,\n  //     error: messagesError,\n  //     data: messagesData,\n  //     refetch: messageRefetch,\n  //   },\n  // ] = useLazyQuery(getMessagesQuery, {\n  //   variables: { convoId: room },\n  // });\n\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (!messagesError && messagesData) {\n      dispatch(setPreviousMessages([]));\n\n      if (messagesData.messages[0] !== undefined) {\n        console.log(messagesData.messages);\n        const alteredMessageList = [];\n        messagesData.messages[0].messages.map(msg => {\n          const newMessage = {\n            body: \"\",\n            isOwner: false\n          };\n\n          if (msg.senderId === currentUser.id) {\n            newMessage.isOwner = true;\n          }\n\n          newMessage.body = msg.body;\n          alteredMessageList.push(newMessage);\n          return null;\n        });\n        setMessageList(alteredMessageList);\n        dispatch(setPreviousMessages(alteredMessageList));\n      }\n    } else {\n      return null;\n    }\n  }, [messagesData, messagesLoading, currentUser]);\n  /* -------------------------------------------------------------------------- */\n\n  const addMessage = (convoId, body) => {\n    editMessage({\n      variables: {\n        convoId: convoId,\n        addMessage: {\n          senderId: currentUser.id,\n          body: body\n        }\n      },\n      refetchQueries: [{\n        getMessagesQuery: getMessagesQuery\n      }],\n      awaitRefetchQueries: true\n    }).then(res => refetchMessages()).catch(err => {\n      var _err$graphQLErrors;\n\n      const errors = (_err$graphQLErrors = err.graphQLErrors) === null || _err$graphQLErrors === void 0 ? void 0 : _err$graphQLErrors.map(error => error.message);\n      console.log(errors);\n    }).then(res => setMessageList());\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  const alteredChatData = async () => {\n    if (messageList.length > 0) {\n      const newMessageList = [];\n      messageList.map(msg => {\n        const newMessage = {\n          body: \"\",\n          isOwner: false\n        };\n\n        if (msg.senderId === currentUser.id) {\n          newMessage.isOwner = true;\n        }\n\n        newMessage.body = msg.body;\n        return newMessageList.push(newMessage);\n      });\n      console.log(newMessageList);\n      return newMessageList;\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n\n  return {\n    messageList,\n    addMessage,\n    currentUser,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend,\n    setMessageList\n  }; //   }\n};\n\n_s(useMessages, \"4+mVyTbycbjcD25NIJr8FAf9kzk=\", false, function () {\n  return [useAppSelector, useAppSelector, useQuery, useMutation, useMutation, useAppDispatch];\n});\n\nexport default useMessages;","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/CHAT/useMessages.js"],"names":["React","useState","useEffect","useMutation","useQuery","useLazyQuery","addConversationMutation","editMessageMutation","getMessagesQuery","useChatRoom","useAppSelector","useAppDispatch","setPreviousMessages","useMessages","currentUser","state","room","currentRoom","value","loading","loadingMessages","error","errorMessages","data","dataMessages","refetch","refetchMessages","messageList","setMessageList","selectedFriend","setSelectedFriend","addConversation","editMessage","dispatch","messagesError","messagesData","messages","undefined","console","log","alteredMessageList","map","msg","newMessage","body","isOwner","senderId","id","push","messagesLoading","addMessage","convoId","variables","refetchQueries","awaitRefetchQueries","then","res","catch","err","errors","graphQLErrors","message","alteredChatData","length","newMessageList","getCurrentFriendMessages"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\n\nimport addConversationMutation from \"../../GQL/mutations/addConversation\";\nimport editMessageMutation from \"../../GQL/mutations/editMessage\";\nimport getMessagesQuery from \"../../GQL/queries/getMessages\";\nimport useChatRoom from \"./useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport { setPreviousMessages } from \"../../redux/features/previousMessagesSlice\";\n\nconst useMessages = () => {\n  const currentUser = useAppSelector((state) => state.currentUser);\n  const room = useAppSelector((state) => state.currentRoom.value);\n  let {\n    loading: loadingMessages,\n    error: errorMessages,\n    data: dataMessages,\n    refetch: refetchMessages,\n  } = useQuery(getMessagesQuery);\n\n  const [messageList, setMessageList] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n\n  const [addConversation] = useMutation(addConversationMutation);\n  const [editMessage] = useMutation(editMessageMutation);\n  const dispatch = useAppDispatch();\n\n  // let [\n  //   getCurrentFriendMessages,\n  //   {\n  //     loading: messagesLoading,\n  //     error: messagesError,\n  //     data: messagesData,\n  //     refetch: messageRefetch,\n  //   },\n  // ] = useLazyQuery(getMessagesQuery, {\n  //   variables: { convoId: room },\n  // });\n\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (!messagesError && messagesData) {\n      dispatch(setPreviousMessages([]));\n      if (messagesData.messages[0] !== undefined) {\n        console.log(messagesData.messages);\n        const alteredMessageList = [];\n\n        messagesData.messages[0].messages.map((msg) => {\n          const newMessage = { body: \"\", isOwner: false };\n          if (msg.senderId === currentUser.id) {\n            newMessage.isOwner = true;\n          }\n          newMessage.body = msg.body;\n\n          alteredMessageList.push(newMessage);\n          return null;\n        });\n\n        setMessageList(alteredMessageList);\n\n        dispatch(setPreviousMessages(alteredMessageList));\n      }\n    } else {\n      return null;\n    }\n  }, [messagesData, messagesLoading, currentUser]);\n\n  /* -------------------------------------------------------------------------- */\n  const addMessage = (convoId, body) => {\n    editMessage({\n      variables: {\n        convoId: convoId,\n        addMessage: { senderId: currentUser.id, body: body },\n      },\n      refetchQueries: [\n        {\n          getMessagesQuery: getMessagesQuery,\n        },\n      ],\n      awaitRefetchQueries: true,\n    })\n      .then((res) => refetchMessages())\n      .catch((err) => {\n        const errors = err.graphQLErrors?.map((error) => error.message);\n        console.log(errors);\n      })\n      .then((res) => setMessageList());\n  };\n  /* -------------------------------------------------------------------------- */\n  const alteredChatData = async () => {\n    if (messageList.length > 0) {\n      const newMessageList = [];\n      messageList.map((msg) => {\n        const newMessage = { body: \"\", isOwner: false };\n        if (msg.senderId === currentUser.id) {\n          newMessage.isOwner = true;\n        }\n        newMessage.body = msg.body;\n\n        return newMessageList.push(newMessage);\n      });\n      console.log(newMessageList);\n      return newMessageList;\n    }\n  };\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  return {\n    messageList,\n    addMessage,\n    currentUser,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend,\n    setMessageList,\n  };\n  //   }\n};\n\nexport default useMessages;\n"]},"metadata":{},"sourceType":"module"}