{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Home/EverythingPosts/PostList/PostList.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport Post from \"../Post/Post\";\nimport currentUserQuery from \"../../../../GQL/queries/CurrentUser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  let {\n    loading,\n    error,\n    data\n  } = useQuery(currentUserQuery);\n  const currentUser = useAppSelector(state => state.currentUser);\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState([]);\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends);\n    }\n  }, [currentUser]);\n  /* ------------------------- creating list of posts ------------------------- */\n\n  useEffect(() => {\n    if (friendList) {\n      const newList = friendList.map((friend, index) => {\n        return friend.posts;\n      });\n      const finishedFriendList = newList.flat();\n      const completeListOfMyPostsAndFriendPosts = currentUser.posts.concat(finishedFriendList);\n      setPostList(completeListOfMyPostsAndFriendPosts);\n    }\n  }, [friendList, currentUser]);\n  /* -------------------------- sorting list of posts ------------------------- */\n\n  useEffect(() => {\n    if (postList.length > 0) {\n      setPostListDone(postList.sort((a, b) => a.time > b.time ? -1 : 1));\n    }\n  }, [postList]);\n\n  const renderPosts = () => {\n    return postListDone.map((post, index) => {\n      const unformattedDate = new Date(parseInt(post.time));\n      const date = unformattedDate.toString();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          name: post.userId.name,\n          date: date,\n          postId: post.id,\n          postContent: post.post,\n          likeCount: post.likedBy.length,\n          likeList: post.likedBy,\n          commentCount: post.comments.length,\n          commentList: post.comments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.postListContainer,\n    children: renderPosts()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PostList, \"oZ97igGGGvHP5CMfdyAFRw2SsIw=\", false, function () {\n  return [useQuery, useAppSelector];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Home/EverythingPosts/PostList/PostList.js"],"names":["styles","useAppSelector","useAppDispatch","React","useState","useEffect","useMutation","useQuery","Post","currentUserQuery","PostList","loading","error","data","currentUser","state","friendList","setFriendList","postList","setPostList","postListDone","setPostListDone","friends","newList","map","friend","index","posts","finishedFriendList","flat","completeListOfMyPostsAndFriendPosts","concat","length","sort","a","b","time","renderPosts","post","unformattedDate","Date","parseInt","date","toString","userId","name","id","likedBy","comments","postListContainer"],"mappings":"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","sourcesContent":["import styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport Post from \"../Post/Post\";\nimport currentUserQuery from \"../../../../GQL/queries/CurrentUser\";\n\nconst PostList = () => {\n  let { loading, error, data } = useQuery(currentUserQuery);\n  const currentUser = useAppSelector((state) => state.currentUser);\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState([]);\n\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends);\n    }\n  }, [currentUser]);\n\n  /* ------------------------- creating list of posts ------------------------- */\n  useEffect(() => {\n    if (friendList) {\n      const newList = friendList.map((friend, index) => {\n        return friend.posts;\n      });\n      const finishedFriendList = newList.flat();\n      const completeListOfMyPostsAndFriendPosts =\n        currentUser.posts.concat(finishedFriendList);\n      setPostList(completeListOfMyPostsAndFriendPosts);\n    }\n  }, [friendList, currentUser]);\n\n  /* -------------------------- sorting list of posts ------------------------- */\n  useEffect(() => {\n    if (postList.length > 0) {\n      setPostListDone(postList.sort((a, b) => (a.time > b.time ? -1 : 1)));\n    }\n  }, [postList]);\n\n  const renderPosts = () => {\n    return postListDone.map((post, index) => {\n      const unformattedDate = new Date(parseInt(post.time));\n      const date = unformattedDate.toString();\n      return (\n        <div key={index}>\n          <Post\n            name={post.userId.name}\n            date={date}\n            postId={post.id}\n            postContent={post.post}\n            likeCount={post.likedBy.length}\n            likeList={post.likedBy}\n            commentCount={post.comments.length}\n            commentList={post.comments}\n          />\n        </div>\n      );\n    });\n  };\n\n  return <div className={styles.postListContainer}>{renderPosts()}</div>;\n};\n\nexport default PostList;\n"]},"metadata":{},"sourceType":"module"}