{"ast":null,"code":"import Log from './Log';\nimport Cache from './Cache';\nimport Storage from './Storage';\nimport Persistor from './Persistor';\nimport Trigger from './Trigger';\n\nvar CachePersistor = function () {\n  function CachePersistor(options) {\n    if (!options.cache) {\n      throw new Error('In order to persist your Apollo Cache, you need to pass in a cache. ' + 'Please see https://www.apollographql.com/docs/react/basics/caching.html for our default InMemoryCache.');\n    }\n\n    if (!options.storage) {\n      throw new Error('In order to persist your Apollo Cache, you need to pass in an underlying storage provider. ' + 'Please see https://github.com/apollographql/apollo-cache-persist#storage-providers');\n    }\n\n    var log = new Log(options);\n    var cache = new Cache(options);\n    var storage = new Storage(options);\n    var persistor = new Persistor({\n      log: log,\n      cache: cache,\n      storage: storage\n    }, options);\n    var trigger = new Trigger({\n      log: log,\n      persistor: persistor\n    }, options);\n    this.log = log;\n    this.cache = cache;\n    this.storage = storage;\n    this.persistor = persistor;\n    this.trigger = trigger;\n  }\n\n  CachePersistor.prototype.persist = function () {\n    return this.persistor.persist();\n  };\n\n  CachePersistor.prototype.restore = function () {\n    return this.persistor.restore();\n  };\n\n  CachePersistor.prototype.purge = function () {\n    return this.persistor.purge();\n  };\n\n  CachePersistor.prototype.pause = function () {\n    this.trigger.pause();\n  };\n\n  CachePersistor.prototype.resume = function () {\n    this.trigger.resume();\n  };\n\n  CachePersistor.prototype.remove = function () {\n    this.trigger.remove();\n  };\n\n  CachePersistor.prototype.getLogs = function (print) {\n    if (print === void 0) {\n      print = false;\n    }\n\n    if (print) {\n      this.log.tailLogs();\n    } else {\n      return this.log.getLogs();\n    }\n  };\n\n  CachePersistor.prototype.getSize = function () {\n    return this.storage.getSize();\n  };\n\n  return CachePersistor;\n}();\n\nexport default CachePersistor;","map":{"version":3,"sources":["../src/CachePersistor.ts"],"names":[],"mappings":"AAAA,OAAO,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAP,MAAkB,SAAlB;AACA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,SAAP,MAAsB,aAAtB;AACA,OAAO,OAAP,MAAoB,WAApB;;AAIA,IAAA,cAAA,GAAA,YAAA;AAOE,WAAA,cAAA,CAAY,OAAZ,EAA4C;AAC1C,QAAI,CAAC,OAAO,CAAC,KAAb,EAAoB;AAClB,YAAM,IAAI,KAAJ,CACJ,yEACE,wGAFE,CAAN;AAID;;AAED,QAAI,CAAC,OAAO,CAAC,OAAb,EAAsB;AACpB,YAAM,IAAI,KAAJ,CACJ,gGACE,oFAFE,CAAN;AAID;;AAED,QAAM,GAAG,GAAG,IAAI,GAAJ,CAAQ,OAAR,CAAZ;AACA,QAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,OAAV,CAAd;AACA,QAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,OAAZ,CAAhB;AACA,QAAM,SAAS,GAAG,IAAI,SAAJ,CAAc;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,KAAK,EAAA,KAAZ;AAAc,MAAA,OAAO,EAAA;AAArB,KAAd,EAAuC,OAAvC,CAAlB;AACA,QAAM,OAAO,GAAG,IAAI,OAAJ,CAAY;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,SAAS,EAAA;AAAhB,KAAZ,EAAgC,OAAhC,CAAhB;AAEA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAMD,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAL,CAAe,OAAf,EAAP;AACD,GAFD;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAL,CAAe,OAAf,EAAP;AACD,GAFD;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAL,CAAe,KAAf,EAAP;AACD,GAFD;;AAQA,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,OAAL,CAAa,KAAb;AACD,GAFD;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,SAAK,OAAL,CAAa,MAAb;AACD,GAFD;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,SAAK,OAAL,CAAa,MAAb;AACD,GAFD;;AAQA,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,KAAR,EAAqB;AAAb,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,KAAA;AAAa;;AACnB,QAAI,KAAJ,EAAW;AACT,WAAK,GAAL,CAAS,QAAT;AACD,KAFD,MAEO;AACL,aAAO,KAAK,GAAL,CAAS,OAAT,EAAP;AACD;AACF,GAND;;AAQA,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAL,CAAa,OAAb,EAAP;AACD,GAFD;;AAGF,SAAA,cAAA;AAAC,CAlFD,EAAA","sourceRoot":"","sourcesContent":["import Log from './Log';\nimport Cache from './Cache';\nimport Storage from './Storage';\nimport Persistor from './Persistor';\nimport Trigger from './Trigger';\nvar CachePersistor = (function () {\n    function CachePersistor(options) {\n        if (!options.cache) {\n            throw new Error('In order to persist your Apollo Cache, you need to pass in a cache. ' +\n                'Please see https://www.apollographql.com/docs/react/basics/caching.html for our default InMemoryCache.');\n        }\n        if (!options.storage) {\n            throw new Error('In order to persist your Apollo Cache, you need to pass in an underlying storage provider. ' +\n                'Please see https://github.com/apollographql/apollo-cache-persist#storage-providers');\n        }\n        var log = new Log(options);\n        var cache = new Cache(options);\n        var storage = new Storage(options);\n        var persistor = new Persistor({ log: log, cache: cache, storage: storage }, options);\n        var trigger = new Trigger({ log: log, persistor: persistor }, options);\n        this.log = log;\n        this.cache = cache;\n        this.storage = storage;\n        this.persistor = persistor;\n        this.trigger = trigger;\n    }\n    CachePersistor.prototype.persist = function () {\n        return this.persistor.persist();\n    };\n    CachePersistor.prototype.restore = function () {\n        return this.persistor.restore();\n    };\n    CachePersistor.prototype.purge = function () {\n        return this.persistor.purge();\n    };\n    CachePersistor.prototype.pause = function () {\n        this.trigger.pause();\n    };\n    CachePersistor.prototype.resume = function () {\n        this.trigger.resume();\n    };\n    CachePersistor.prototype.remove = function () {\n        this.trigger.remove();\n    };\n    CachePersistor.prototype.getLogs = function (print) {\n        if (print === void 0) { print = false; }\n        if (print) {\n            this.log.tailLogs();\n        }\n        else {\n            return this.log.getLogs();\n        }\n    };\n    CachePersistor.prototype.getSize = function () {\n        return this.storage.getSize();\n    };\n    return CachePersistor;\n}());\nexport default CachePersistor;\n//# sourceMappingURL=CachePersistor.js.map"]},"metadata":{},"sourceType":"module"}