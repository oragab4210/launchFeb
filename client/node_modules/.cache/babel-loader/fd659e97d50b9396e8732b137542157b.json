{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/CHAT/RoomsList/RoomsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./RoomList.module.css\";\nimport useChatRoom from \"../useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { setRoom } from \"../../../redux/features/roomSlice\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport useMessages from \"../useMessages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RoomsList = _ref => {\n  _s();\n\n  let {\n    setCurrentFriend\n  } = _ref;\n  let {\n    loading,\n    error,\n    data\n  } = useQuery(query);\n  const [activeConversations, setActiveConversations] = useState([]);\n  const {\n    user,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend\n  } = useMessages();\n  /* -------------------------------------------------------------------------- */\n\n  const room = useAppSelector(state => state.currentRoom.value);\n  const userAccounts = useAppSelector(state => state.userAddresses.value);\n  const dispatch = useAppDispatch();\n  const {\n    combineAddresses,\n    setConversationId\n  } = useChatRoom(room);\n  const [currentRoom, setCurrentRoom] = useState(room);\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (data) {\n      const user = data.user2;\n      console.log(user);\n      setActiveConversations(user.conversations);\n    }\n\n    if (selectedFriend) {\n      getCurrentFriendMessages();\n    }\n  }, [data]);\n  /* -------------------------------------------------------------------------- */\n\n  const setRoom_setConvoId_getMessages = (personId, index) => {\n    const hash = combineAddresses(user.id, personId);\n    console.log(hash);\n    return [dispatch(setRoom(hash)), console.log(hash), setSelectedFriend(index), setConversationId(hash), getCurrentFriendMessages({\n      variables: {\n        convoId: hash\n      }\n    })];\n  };\n\n  const renderRooms = () => {\n    console.log(activeConversations, \"active convos\");\n    return activeConversations.map((person, index) => {\n      console.log(person, \"person\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.room} ${selectedFriend === index ? styles.selectedRoom : null}`,\n        onClick: () => [setRoom_setConvoId_getMessages(person.id, index), setCurrentFriend(person.email)],\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: person.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.title,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: \"0px\",\n          marginTop: \"0px\"\n        },\n        children: \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.roomListContainer,\n      children: activeConversations.length > 0 ? renderRooms() : renderRooms()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RoomsList, \"naERhWO4Uuwpp1WwAfpKl6gtpI8=\", false, function () {\n  return [useQuery, useMessages, useAppSelector, useAppSelector, useAppDispatch, useChatRoom];\n});\n\n_c = RoomsList;\nexport default RoomsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomsList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/CHAT/RoomsList/RoomsList.js"],"names":["React","useState","useEffect","styles","useChatRoom","useAppSelector","useAppDispatch","setRoom","query","useMutation","useQuery","useLazyQuery","useMessages","RoomsList","setCurrentFriend","loading","error","data","activeConversations","setActiveConversations","user","getCurrentFriendMessages","selectedFriend","setSelectedFriend","room","state","currentRoom","value","userAccounts","userAddresses","dispatch","combineAddresses","setConversationId","setCurrentRoom","user2","console","log","conversations","setRoom_setConvoId_getMessages","personId","index","hash","id","variables","convoId","renderRooms","map","person","selectedRoom","email","container","title","marginBottom","marginTop","roomListContainer","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./RoomList.module.css\";\nimport useChatRoom from \"../useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { setRoom } from \"../../../redux/features/roomSlice\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport useMessages from \"../useMessages\";\n\nconst RoomsList = ({ setCurrentFriend }) => {\n  let { loading, error, data } = useQuery(query);\n  const [activeConversations, setActiveConversations] = useState([]);\n  const { user, getCurrentFriendMessages, selectedFriend, setSelectedFriend } =\n    useMessages();\n\n  /* -------------------------------------------------------------------------- */\n  const room = useAppSelector((state) => state.currentRoom.value);\n  const userAccounts = useAppSelector((state) => state.userAddresses.value);\n  const dispatch = useAppDispatch();\n  const { combineAddresses, setConversationId } = useChatRoom(room);\n  const [currentRoom, setCurrentRoom] = useState(room);\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    if (data) {\n      const user = data.user2;\n      console.log(user);\n      setActiveConversations(user.conversations);\n    }\n    if (selectedFriend) {\n      getCurrentFriendMessages();\n    }\n  }, [data]);\n\n  /* -------------------------------------------------------------------------- */\n  const setRoom_setConvoId_getMessages = (personId, index) => {\n    const hash = combineAddresses(user.id, personId);\n    console.log(hash);\n    return [\n      dispatch(setRoom(hash)),\n      console.log(hash),\n      setSelectedFriend(index),\n      setConversationId(hash),\n      getCurrentFriendMessages({\n        variables: {\n          convoId: hash,\n        },\n      }),\n    ];\n  };\n\n  const renderRooms = () => {\n    console.log(activeConversations, \"active convos\");\n    return activeConversations.map((person, index) => {\n      console.log(person, \"person\");\n      return (\n        <div\n          className={`${styles.room} ${\n            selectedFriend === index ? styles.selectedRoom : null\n          }`}\n          onClick={() => [\n            setRoom_setConvoId_getMessages(person.id, index),\n            setCurrentFriend(person.email),\n          ]}\n          key={index}\n        >\n          <h1>{person.email}</h1>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>\n        <h2 style={{ marginBottom: \"0px\", marginTop: \"0px\" }}>Join Room</h2>\n      </div>\n\n      <div className={styles.roomListContainer}>\n        {activeConversations.length > 0 ? renderRooms() : renderRooms()}\n      </div>\n    </div>\n  );\n};\n\nexport default RoomsList;\n"]},"metadata":{},"sourceType":"module"}