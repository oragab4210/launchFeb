{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/omarragab/Documents/Job/ResumeProject1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"./utils\");\n\nvar cid_1 = require(\"multiformats/cid\");\n\nfunction fromSplit(split) {\n  var _split = _slicedToArray(split, 3),\n      protectedHeader = _split[0],\n      payload = _split[1],\n      signature = _split[2];\n\n  return {\n    payload: payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature: signature\n    }],\n    link: cid_1.CID.decode(utils_1.fromBase64url(payload))\n  };\n}\n\nfunction encodeSignature(signature) {\n  var encoded = {\n    signature: utils_1.fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = utils_1.fromBase64url(signature.protected);\n  return encoded;\n}\n\nfunction encode(jws) {\n  var payload = utils_1.fromBase64url(jws.payload);\n\n  try {\n    cid_1.CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n\n  var encodedJws = {\n    payload: payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n  return encodedJws;\n}\n\nfunction decodeSignature(encoded) {\n  var sign = {\n    signature: utils_1.toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = utils_1.toBase64url(encoded.protected);\n  return sign;\n}\n\nfunction decode(encoded) {\n  var decoded = {\n    payload: utils_1.toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}\n\nexports.default = {\n  fromSplit: fromSplit,\n  encode: encode,\n  decode: decode\n};","map":{"version":3,"sources":["../src/signing.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAiCA,SAAS,SAAT,CAAmB,KAAnB,EAAuC;AACrC,8BAA8C,KAA9C;AAAA,MAAO,eAAP;AAAA,MAAwB,OAAxB;AAAA,MAAiC,SAAjC;;AACA,SAAO;AACL,IAAA,OAAO,EAAP,OADK;AAEL,IAAA,UAAU,EAAE,CAAC;AAAE,MAAA,SAAS,EAAE,eAAb;AAA8B,MAAA,SAAS,EAAT;AAA9B,KAAD,CAFP;AAGL,IAAA,IAAI,EAAE,KAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,OAAA,CAAA,aAAA,CAAc,OAAd,CAAX;AAHD,GAAP;AAKD;;AAED,SAAS,eAAT,CAAyB,SAAzB,EAAgD;AAC9C,MAAM,OAAO,GAAqB;AAChC,IAAA,SAAS,EAAE,OAAA,CAAA,aAAA,CAAc,SAAS,CAAC,SAAxB;AADqB,GAAlC;AAGA,MAAI,SAAS,CAAC,MAAd,EAAsB,OAAO,CAAC,MAAR,GAAiB,SAAS,CAAC,MAA3B;AACtB,MAAI,SAAS,CAAC,SAAd,EAAyB,OAAO,CAAC,SAAR,GAAoB,OAAA,CAAA,aAAA,CAAc,SAAS,CAAC,SAAxB,CAApB;AACzB,SAAO,OAAP;AACD;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAA2B;AACzB,MAAM,OAAO,GAAG,OAAA,CAAA,aAAA,CAAc,GAAG,CAAC,OAAlB,CAAhB;;AACA,MAAI;AACF,IAAA,KAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,OAAX;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,UAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,MAAM,UAAU,GAAe;AAC7B,IAAA,OAAO,EAAP,OAD6B;AAE7B,IAAA,UAAU,EAAE,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAmB,eAAnB;AAFiB,GAA/B;AAIA,SAAO,UAAP;AACD;;AAED,SAAS,eAAT,CAAyB,OAAzB,EAAkD;AAChD,MAAM,IAAI,GAAiB;AACzB,IAAA,SAAS,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,SAApB;AADc,GAA3B;AAGA,MAAI,OAAO,CAAC,MAAZ,EAAoB,IAAI,CAAC,MAAL,GAAc,OAAO,CAAC,MAAtB;AACpB,MAAI,OAAO,CAAC,SAAZ,EAAuB,IAAI,CAAC,SAAL,GAAiB,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,SAApB,CAAjB;AACvB,SAAO,IAAP;AACD;;AAED,SAAS,MAAT,CAAgB,OAAhB,EAAmC;AACjC,MAAM,OAAO,GAAW;AACtB,IAAA,OAAO,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,OAApB,CADa;AAEtB,IAAA,UAAU,EAAE,OAAO,CAAC,UAAR,CAAmB,GAAnB,CAAuB,eAAvB;AAFU,GAAxB;AAIA,EAAA,OAAO,CAAC,IAAR,GAAe,KAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,IAAI,UAAJ,CAAe,OAAO,CAAC,OAAvB,CAAX,CAAf;AACA,SAAO,OAAP;AACD;;AAED,OAAA,CAAA,OAAA,GAAe;AACb,EAAA,SAAS,EAAT,SADa;AAEb,EAAA,MAAM,EAAN,MAFa;AAGb,EAAA,MAAM,EAAN;AAHa,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nconst cid_1 = require(\"multiformats/cid\");\nfunction fromSplit(split) {\n    const [protectedHeader, payload, signature] = split;\n    return {\n        payload,\n        signatures: [{ protected: protectedHeader, signature }],\n        link: cid_1.CID.decode(utils_1.fromBase64url(payload)),\n    };\n}\nfunction encodeSignature(signature) {\n    const encoded = {\n        signature: utils_1.fromBase64url(signature.signature),\n    };\n    if (signature.header)\n        encoded.header = signature.header;\n    if (signature.protected)\n        encoded.protected = utils_1.fromBase64url(signature.protected);\n    return encoded;\n}\nfunction encode(jws) {\n    const payload = utils_1.fromBase64url(jws.payload);\n    try {\n        cid_1.CID.decode(payload);\n    }\n    catch (e) {\n        throw new Error('Not a valid DagJWS');\n    }\n    const encodedJws = {\n        payload,\n        signatures: jws.signatures.map(encodeSignature),\n    };\n    return encodedJws;\n}\nfunction decodeSignature(encoded) {\n    const sign = {\n        signature: utils_1.toBase64url(encoded.signature),\n    };\n    if (encoded.header)\n        sign.header = encoded.header;\n    if (encoded.protected)\n        sign.protected = utils_1.toBase64url(encoded.protected);\n    return sign;\n}\nfunction decode(encoded) {\n    const decoded = {\n        payload: utils_1.toBase64url(encoded.payload),\n        signatures: encoded.signatures.map(decodeSignature),\n    };\n    decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n    return decoded;\n}\nexports.default = {\n    fromSplit,\n    encode,\n    decode,\n};\n//# sourceMappingURL=signing.js.map"]},"metadata":{},"sourceType":"script"}