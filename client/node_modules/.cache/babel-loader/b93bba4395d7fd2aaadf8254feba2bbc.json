{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Home/EverythingPosts/PostList/PostList.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport mutation from \"../../../../GQL/mutations/EditUser\";\nimport getCurrentUser from \"../../../../GQL/queries/CurrentUser\";\nimport Post from \"../Post/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  const currentUser = useAppSelector(state => state.currentUser.value);\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState([]);\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends);\n    }\n  }, [currentUser]);\n  /* ------------------------- creating list of posts ------------------------- */\n\n  useEffect(() => {\n    if (friendList) {\n      const newList = friendList.map((friend, index) => {\n        return friend.posts;\n      });\n      const finishedFriendList = newList.flat();\n      const completeListOfMyPostsAndFriendPosts = currentUser.posts.concat(finishedFriendList);\n      setPostList(completeListOfMyPostsAndFriendPosts);\n    }\n  }, [friendList, currentUser]);\n  /* -------------------------- sorting list of posts ------------------------- */\n\n  useEffect(() => {\n    if (postList.length > 0) {\n      setPostListDone(postList.sort((a, b) => a.time > b.time ? -1 : 1));\n    }\n  }, [postList]);\n\n  const renderPosts = () => {\n    return postListDone.map((post, index) => {\n      const d = new Date(parseInt(post.time));\n      const date = d.toString();\n      console.log(post, \"post test\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          name: post.userId.name,\n          date: date,\n          postId: post.id,\n          postContent: post.post,\n          likeCount: post.likedBy.length,\n          likeList: post.likedBy,\n          commentCount: post.comments.length,\n          commentList: post.comments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.postListContainer,\n    children: renderPosts()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PostList, \"QIigQxNVRdu699NmEMKmHewXuoU=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Home/EverythingPosts/PostList/PostList.js"],"names":["styles","useAppSelector","useAppDispatch","React","useState","useEffect","useMutation","useQuery","mutation","getCurrentUser","Post","PostList","currentUser","state","value","friendList","setFriendList","postList","setPostList","postListDone","setPostListDone","friends","newList","map","friend","index","posts","finishedFriendList","flat","completeListOfMyPostsAndFriendPosts","concat","length","sort","a","b","time","renderPosts","post","d","Date","parseInt","date","toString","console","log","userId","name","id","likedBy","comments","postListContainer"],"mappings":"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","sourcesContent":["import styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport mutation from \"../../../../GQL/mutations/EditUser\";\nimport getCurrentUser from \"../../../../GQL/queries/CurrentUser\";\nimport Post from \"../Post/Post\";\n\nconst PostList = () => {\n  const currentUser = useAppSelector((state) => state.currentUser.value);\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState([]);\n\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends);\n    }\n  }, [currentUser]);\n\n  /* ------------------------- creating list of posts ------------------------- */\n  useEffect(() => {\n    if (friendList) {\n      const newList = friendList.map((friend, index) => {\n        return friend.posts;\n      });\n      const finishedFriendList = newList.flat();\n      const completeListOfMyPostsAndFriendPosts =\n        currentUser.posts.concat(finishedFriendList);\n      setPostList(completeListOfMyPostsAndFriendPosts);\n    }\n  }, [friendList, currentUser]);\n\n  /* -------------------------- sorting list of posts ------------------------- */\n  useEffect(() => {\n    if (postList.length > 0) {\n      setPostListDone(postList.sort((a, b) => (a.time > b.time ? -1 : 1)));\n    }\n  }, [postList]);\n\n  const renderPosts = () => {\n    return postListDone.map((post, index) => {\n      const d = new Date(parseInt(post.time));\n      const date = d.toString();\n      console.log(post, \"post test\");\n\n      return (\n        <div key={index}>\n          <Post\n            name={post.userId.name}\n            date={date}\n            postId={post.id}\n            postContent={post.post}\n            likeCount={post.likedBy.length}\n            likeList={post.likedBy}\n            commentCount={post.comments.length}\n            commentList={post.comments}\n          />\n        </div>\n      );\n    });\n  };\n\n  return <div className={styles.postListContainer}>{renderPosts()}</div>;\n};\n\nexport default PostList;\n"]},"metadata":{},"sourceType":"module"}