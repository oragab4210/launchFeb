{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/CHAT/RoomsList/RoomsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./RoomList.module.css\";\nimport useChatRoom from \"../useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { setRoom } from \"../../../redux/features/roomSlice\";\nimport getMessagesQuery from \"../../../GQL/queries/getMessages\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport useMessages from \"../useMessages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RoomsList = _ref => {\n  _s();\n\n  let {\n    currentFriend,\n    setCurrentFriend\n  } = _ref;\n  const currentUser = useAppSelector(state => state.currentUser.value);\n  const [activeConversations, setActiveConversations] = useState([]);\n  const [roomChange, setRoomChange] = useState(false);\n  const {\n    user,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend\n  } = useMessages();\n  /* -------------------------------------------------------------------------- */\n\n  const room = useAppSelector(state => state.currentRoom.value);\n  let {\n    loading: loadingMessages,\n    error: errorMessages,\n    data: dataMessages,\n    refetch: refetchMessages\n  } = useQuery(getMessagesQuery, {\n    variables: {\n      convoId: room\n    }\n  });\n  /* -------------------------------------------------------------------------- */\n\n  const userAccounts = useAppSelector(state => state.userAddresses.value);\n  const dispatch = useAppDispatch();\n  const {\n    combineAddresses,\n    setConversationId\n  } = useChatRoom(room);\n  /* -------------------------------------------------------------------------- */\n  // useEffect(() => {\n  //   refetchMessages();\n  // }, [roomChange]);\n\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (currentUser) {\n      console.log(currentUser.conversations, \"help1\");\n      setActiveConversations(currentUser.conversations);\n    }\n\n    if (selectedFriend) {\n      getCurrentFriendMessages();\n    }\n  }, [currentUser]);\n  /* -------------------------------------------------------------------------- */\n\n  const setRoom_setConvoId_getMessages = (personId, index) => {\n    const hash = combineAddresses(user.id, personId);\n    console.log(hash);\n    return [dispatch(setRoom(hash)), console.log(hash), setSelectedFriend(index), setConversationId(hash), getCurrentFriendMessages()];\n  };\n\n  const renderRooms = () => {\n    return activeConversations.map((person, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.room} ${selectedFriend === index ? styles.selectedRoom : null}`,\n        onClick: () => [setRoom_setConvoId_getMessages(person.id, index), setCurrentFriend(person.email), setRoomChange(!roomChange)],\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: person.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.title,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: \"0px\",\n          marginTop: \"0px\"\n        },\n        children: \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.roomListContainer,\n      children: activeConversations.length > 0 ? renderRooms() : renderRooms()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RoomsList, \"f1SfSyqxmZb40XlIb/YXrrRM0EU=\", false, function () {\n  return [useAppSelector, useMessages, useAppSelector, useQuery, useAppSelector, useAppDispatch, useChatRoom];\n});\n\n_c = RoomsList;\nexport default RoomsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomsList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/CHAT/RoomsList/RoomsList.js"],"names":["React","useState","useEffect","styles","useChatRoom","useAppSelector","useAppDispatch","setRoom","getMessagesQuery","useMutation","useQuery","useLazyQuery","useMessages","RoomsList","currentFriend","setCurrentFriend","currentUser","state","value","activeConversations","setActiveConversations","roomChange","setRoomChange","user","getCurrentFriendMessages","selectedFriend","setSelectedFriend","room","currentRoom","loading","loadingMessages","error","errorMessages","data","dataMessages","refetch","refetchMessages","variables","convoId","userAccounts","userAddresses","dispatch","combineAddresses","setConversationId","console","log","conversations","setRoom_setConvoId_getMessages","personId","index","hash","id","renderRooms","map","person","selectedRoom","email","container","title","marginBottom","marginTop","roomListContainer","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./RoomList.module.css\";\nimport useChatRoom from \"../useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { setRoom } from \"../../../redux/features/roomSlice\";\nimport getMessagesQuery from \"../../../GQL/queries/getMessages\";\n\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport useMessages from \"../useMessages\";\n\nconst RoomsList = ({ currentFriend, setCurrentFriend }) => {\n  const currentUser = useAppSelector((state) => state.currentUser.value);\n  const [activeConversations, setActiveConversations] = useState([]);\n  const [roomChange, setRoomChange] = useState(false);\n  const { user, getCurrentFriendMessages, selectedFriend, setSelectedFriend } =\n    useMessages();\n  /* -------------------------------------------------------------------------- */\n  const room = useAppSelector((state) => state.currentRoom.value);\n  let {\n    loading: loadingMessages,\n    error: errorMessages,\n    data: dataMessages,\n    refetch: refetchMessages,\n  } = useQuery(getMessagesQuery, {\n    variables: { convoId: room },\n  });\n  /* -------------------------------------------------------------------------- */\n  const userAccounts = useAppSelector((state) => state.userAddresses.value);\n  const dispatch = useAppDispatch();\n  const { combineAddresses, setConversationId } = useChatRoom(room);\n\n  /* -------------------------------------------------------------------------- */\n  // useEffect(() => {\n  //   refetchMessages();\n  // }, [roomChange]);\n\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (currentUser) {\n      console.log(currentUser.conversations, \"help1\");\n      setActiveConversations(currentUser.conversations);\n    }\n    if (selectedFriend) {\n      getCurrentFriendMessages();\n    }\n  }, [currentUser]);\n\n  /* -------------------------------------------------------------------------- */\n  const setRoom_setConvoId_getMessages = (personId, index) => {\n    const hash = combineAddresses(user.id, personId);\n    console.log(hash);\n    return [\n      dispatch(setRoom(hash)),\n      console.log(hash),\n      setSelectedFriend(index),\n      setConversationId(hash),\n      getCurrentFriendMessages(),\n    ];\n  };\n\n  const renderRooms = () => {\n    return activeConversations.map((person, index) => {\n      return (\n        <div\n          className={`${styles.room} ${\n            selectedFriend === index ? styles.selectedRoom : null\n          }`}\n          onClick={() => [\n            setRoom_setConvoId_getMessages(person.id, index),\n            setCurrentFriend(person.email),\n            setRoomChange(!roomChange),\n          ]}\n          key={index}\n        >\n          <h1>{person.email}</h1>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>\n        <h2 style={{ marginBottom: \"0px\", marginTop: \"0px\" }}>Join Room</h2>\n      </div>\n\n      <div className={styles.roomListContainer}>\n        {activeConversations.length > 0 ? renderRooms() : renderRooms()}\n      </div>\n    </div>\n  );\n};\n\nexport default RoomsList;\n"]},"metadata":{},"sourceType":"module"}