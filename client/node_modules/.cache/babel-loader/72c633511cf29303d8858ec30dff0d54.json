{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/index.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\n/* -------------------------------------------------------------------------- */\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport App from \"./App\";\n/* -------------------------------------------------------------------------- */\n\nimport { ApolloClient, ApolloProvider, InMemoryCache, HttpLink } from \"@apollo/client\";\nimport { persistCache, LocalStorageWrapper } from \"apollo3-cache-persist\";\nimport CurrentUser from \"./GQL/queries/CurrentUser\";\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cache = new InMemoryCache();\n\nconst init = async () => {\n  await persistCache({\n    cache,\n    storage: window.localStorage\n  });\n};\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\"\n  }),\n  cache: cache,\n  connectToDevTools: true\n});\n\ntry {\n  cache.readQuery({\n    query: CurrentUser\n  });\n} catch (error) {\n  cache.writeData({\n    data: {\n      selectedCountries: []\n    }\n  });\n}\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n// const client = new ApolloClient({\n//   link: new HttpLink({\n//     uri: \"http://localhost:4000/graphql\",\n//     credentials: \"include\",\n//   }),\n//   cache: new InMemoryCache(),\n//   connectToDevTools: true,\n// });\n\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n\nrender( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 60,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\ninit();","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/index.js"],"names":["React","render","Provider","store","App","ApolloClient","ApolloProvider","InMemoryCache","HttpLink","persistCache","LocalStorageWrapper","CurrentUser","cache","init","storage","window","localStorage","client","link","uri","credentials","connectToDevTools","readQuery","query","error","writeData","data","selectedCountries","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAO,aAAP;AACA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA;;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,QAJF,QAKO,gBALP;AAMA,SAASC,YAAT,EAAuBC,mBAAvB,QAAkD,uBAAlD;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA;;AACA;;;AACA,MAAMC,KAAK,GAAG,IAAIL,aAAJ,EAAd;;AACA,MAAMM,IAAI,GAAG,YAAY;AACvB,QAAMJ,YAAY,CAAC;AACjBG,IAAAA,KADiB;AAEjBE,IAAAA,OAAO,EAAEC,MAAM,CAACC;AAFC,GAAD,CAAlB;AAID,CALD;;AAOA,MAAMC,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;AAC9Ba,EAAAA,IAAI,EAAE,IAAIV,QAAJ,CAAa;AACjBW,IAAAA,GAAG,EAAE,+BADY;AAEjBC,IAAAA,WAAW,EAAE;AAFI,GAAb,CADwB;AAK9BR,EAAAA,KAAK,EAAEA,KALuB;AAM9BS,EAAAA,iBAAiB,EAAE;AANW,CAAjB,CAAf;;AAQA,IAAI;AACFT,EAAAA,KAAK,CAACU,SAAN,CAAgB;AACdC,IAAAA,KAAK,EAAEZ;AADO,GAAhB;AAGD,CAJD,CAIE,OAAOa,KAAP,EAAc;AACdZ,EAAAA,KAAK,CAACa,SAAN,CAAgB;AACdC,IAAAA,IAAI,EAAE;AACJC,MAAAA,iBAAiB,EAAE;AADf;AADQ,GAAhB;AAKD;AACD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;;AAEA1B,MAAM,eACJ,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEgB,MAAxB;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEd,KAAjB;AAAA,6BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADI,EAQJyB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CARI,CAAN;AAUAhB,IAAI","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\n/* -------------------------------------------------------------------------- */\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport App from \"./App\";\n/* -------------------------------------------------------------------------- */\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  HttpLink,\n} from \"@apollo/client\";\nimport { persistCache, LocalStorageWrapper } from \"apollo3-cache-persist\";\nimport CurrentUser from \"./GQL/queries/CurrentUser\";\n/* -------------------------------------------------------------------------- */\n/* -------------------------------------------------------------------------- */\nconst cache = new InMemoryCache();\nconst init = async () => {\n  await persistCache({\n    cache,\n    storage: window.localStorage,\n  });\n};\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\",\n  }),\n  cache: cache,\n  connectToDevTools: true,\n});\ntry {\n  cache.readQuery({\n    query: CurrentUser,\n  });\n} catch (error) {\n  cache.writeData({\n    data: {\n      selectedCountries: [],\n    },\n  });\n}\n/* -------------------------------------------------------------------------- */\n/* -------------------------------------------------------------------------- */\n// const client = new ApolloClient({\n//   link: new HttpLink({\n//     uri: \"http://localhost:4000/graphql\",\n//     credentials: \"include\",\n//   }),\n//   cache: new InMemoryCache(),\n//   connectToDevTools: true,\n// });\n/* -------------------------------------------------------------------------- */\n/* -------------------------------------------------------------------------- */\n\nrender(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\ninit();\n"]},"metadata":{},"sourceType":"module"}