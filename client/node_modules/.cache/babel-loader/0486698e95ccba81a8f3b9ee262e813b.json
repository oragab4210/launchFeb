{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar Log = function () {\n  function Log(options) {\n    var _a = options.debug,\n        debug = _a === void 0 ? false : _a;\n    this.debug = debug;\n    this.lines = [];\n  }\n\n  Log.prototype.emit = function (level, message) {\n    if (level in console) {\n      var prefix = Log.prefix;\n      console[level].apply(console, __spreadArrays([prefix], message));\n    }\n  };\n\n  Log.prototype.tailLogs = function () {\n    var _this = this;\n\n    this.lines.forEach(function (_a) {\n      var level = _a[0],\n          message = _a[1];\n      return _this.emit(level, message);\n    });\n  };\n\n  Log.prototype.getLogs = function () {\n    return this.lines;\n  };\n\n  Log.prototype.write = function (level, message) {\n    var buffer = Log.buffer;\n    this.lines = __spreadArrays(this.lines.slice(1 - buffer), [[level, message]]);\n\n    if (this.debug || level !== 'log') {\n      this.emit(level, message);\n    }\n  };\n\n  Log.prototype.info = function () {\n    var message = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      message[_i] = arguments[_i];\n    }\n\n    this.write('log', message);\n  };\n\n  Log.prototype.warn = function () {\n    var message = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      message[_i] = arguments[_i];\n    }\n\n    this.write('warn', message);\n  };\n\n  Log.prototype.error = function () {\n    var message = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      message[_i] = arguments[_i];\n    }\n\n    this.write('error', message);\n  };\n\n  Log.buffer = 30;\n  Log.prefix = '[apollo-cache-persist]';\n  return Log;\n}();\n\nexport default Log;","map":{"version":3,"sources":["../src/Log.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,IAAA,GAAA,GAAA,YAAA;AAOE,WAAA,GAAA,CAAY,OAAZ,EAA4C;AAClC,QAAA,EAAA,GAAkB,OAAO,CAAZ,KAAb;AAAA,QAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAAb;AAER,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,KAAL,GAAa,EAAb;AACD;;AAED,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,KAAL,EAAsB,OAAtB,EAAoC;AAClC,QAAI,KAAK,IAAI,OAAb,EAAsB;AACZ,UAAA,MAAM,GAAK,GAAG,CAAR,MAAN;AACR,MAAA,OAAO,CAAC,KAAD,CAAP,CAAc,KAAd,CAAA,OAAA,EAAO,cAAA,CAAA,CAAQ,MAAR,CAAA,EAAmB,OAAnB,CAAP;AACD;AACF,GALD;;AAOA,EAAA,GAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,EAAD,EAAiB;UAAf,KAAK,GAAA,EAAA,CAAA,CAAA,C;UAAE,OAAO,GAAA,EAAA,CAAA,CAAA,C;AAAM,aAAA,KAAI,CAAC,IAAL,CAAU,KAAV,EAAiB,OAAjB,CAAA;AAAyB,KAAlE;AACD,GAFD;;AAIA,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAZ;AACD,GAFD;;AAIA,EAAA,GAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,KAAN,EAAuB,OAAvB,EAAqC;AAC3B,QAAA,MAAM,GAAK,GAAG,CAAR,MAAN;AAER,SAAK,KAAL,GAAU,cAAA,CAAO,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAI,MAArB,CAAP,EAAmC,CAAE,CAAC,KAAD,EAAQ,OAAR,CAAF,CAAnC,CAAV;;AAEA,QAAI,KAAK,KAAL,IAAc,KAAK,KAAK,KAA5B,EAAmC;AACjC,WAAK,IAAL,CAAU,KAAV,EAAiB,OAAjB;AACD;AACF,GARD;;AAUA,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAK,QAAA,OAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,MAAA,OAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACH,SAAK,KAAL,CAAW,KAAX,EAAkB,OAAlB;AACD,GAFD;;AAIA,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAK,QAAA,OAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,MAAA,OAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACH,SAAK,KAAL,CAAW,MAAX,EAAmB,OAAnB;AACD,GAFD;;AAIA,EAAA,GAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAM,QAAA,OAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,MAAA,OAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACJ,SAAK,KAAL,CAAW,OAAX,EAAoB,OAApB;AACD,GAFD;;AA3CO,EAAA,GAAA,CAAA,MAAA,GAAS,EAAT;AACA,EAAA,GAAA,CAAA,MAAA,GAAS,wBAAT;AA6CT,SAAA,GAAA;AAAC,CAlDD,EAAA;;eAAqB,G","sourceRoot":"","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nvar Log = (function () {\n    function Log(options) {\n        var _a = options.debug, debug = _a === void 0 ? false : _a;\n        this.debug = debug;\n        this.lines = [];\n    }\n    Log.prototype.emit = function (level, message) {\n        if (level in console) {\n            var prefix = Log.prefix;\n            console[level].apply(console, __spreadArrays([prefix], message));\n        }\n    };\n    Log.prototype.tailLogs = function () {\n        var _this = this;\n        this.lines.forEach(function (_a) {\n            var level = _a[0], message = _a[1];\n            return _this.emit(level, message);\n        });\n    };\n    Log.prototype.getLogs = function () {\n        return this.lines;\n    };\n    Log.prototype.write = function (level, message) {\n        var buffer = Log.buffer;\n        this.lines = __spreadArrays(this.lines.slice(1 - buffer), [[level, message]]);\n        if (this.debug || level !== 'log') {\n            this.emit(level, message);\n        }\n    };\n    Log.prototype.info = function () {\n        var message = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            message[_i] = arguments[_i];\n        }\n        this.write('log', message);\n    };\n    Log.prototype.warn = function () {\n        var message = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            message[_i] = arguments[_i];\n        }\n        this.write('warn', message);\n    };\n    Log.prototype.error = function () {\n        var message = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            message[_i] = arguments[_i];\n        }\n        this.write('error', message);\n    };\n    Log.buffer = 30;\n    Log.prefix = '[apollo-cache-persist]';\n    return Log;\n}());\nexport default Log;\n//# sourceMappingURL=Log.js.map"]},"metadata":{},"sourceType":"module"}