{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useCallback } from \"react\"; // import { create } from \"ipfs-http-client\";\n// const ipfs = create({\n//   host: \"ipfs.infura.io\",\n//   port: 5001,\n//   protocol: \"https\",\n// });\n\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nconst useIPFS = () => {\n  _s();\n\n  const [ipfsBuffer, setIPFSBuffer] = useState(null);\n  const [fileUrl, setFileUrl] = useState(null);\n  /* ----------------------------------IPFS--------------------------------- */\n\n  const captureFile = async e => {\n    e.preventDefault();\n    console.log(\"File captured\");\n    const file = e.target.files[0];\n    const reader = new window.FileReader();\n    console.log(file);\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => {\n      setIPFSBuffer(Buffer(reader.result));\n      console.log(\"Buffer\", Buffer(reader.result));\n    };\n\n    return ipfsBuffer;\n  }; // const captureJSON = () => {\n  //   // e.preventDefault();\n  //   console.log(\"File captured\");\n  //   const stuff = data;\n  //   const str = JSON.stringify(stuff);\n  //   const bytes = new TextEncoder().encode(str);\n  //   const blob = new Blob([bytes], {\n  //     type: \"application/json;charset=utf-8\",\n  //   });\n  //   const reader = new window.FileReader();\n  //   reader.readAsArrayBuffer(blob);\n  //   reader.onloadend = () => {\n  //     setIPFSBuffer(Buffer(reader.result));\n  //     console.log(\"Buffer\", Buffer(reader.result));\n  //   };\n  //   return Buffer(reader.result);\n  // };\n\n\n  const ipfsSubmit = async e => {\n    e.preventDefault();\n    console.log(\"Submitting to IPFS\");\n    const result = await ipfs.add(ipfsBuffer);\n    console.log(\"IPFS RESULT:\", result.path);\n    const picHash = result.path;\n    console.log(result.path);\n    return `https://ipfs.infura.io/ipfs/${picHash}`; //   /* -------------------------------------------------------------------------- */\n    //   /* --------------------------- store on blockchain -------------------------- */\n    //   // Step 2: store file on blockchain\n    //   //  await contract.methods\n    //   //  .set(picHash)\n    //   //  .send({\n    //   //    from: account,\n    //   //  })\n    //   //  .then((res) => setPichash(picHash));\n    // };\n    //   const renderIPFSImage = () => {\n    //     return `https://ipfs.infura.io/ipfs/${picHash}`;\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n\n  const captureFileAndUploadToIPFS = async e => {\n    const file = e.target.files[0];\n\n    try {\n      const added = await client.add(file, {\n        progress: prog => console.log(`received: ${prog}`)\n      });\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      setFileUrl(url);\n      return url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n\n  const uploadToIPFS = async data => {\n    try {\n      const added = await client.add(data);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      return url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  return {\n    // web3Modal_address_abi,\n    // ethers_address_abi,\n    captureFile,\n    // captureJSON,\n    // ipfsSubmit,\n    uploadToIPFS,\n    captureFileAndUploadToIPFS\n  };\n};\n\n_s(useIPFS, \"IrjRIEIEecLwyZ1zjwlAV8hP2tQ=\");\n\nexport default useIPFS;","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/utils/useIPFS.js"],"names":["React","useEffect","useRef","useState","useCallback","create","ipfsHttpClient","client","useIPFS","ipfsBuffer","setIPFSBuffer","fileUrl","setFileUrl","captureFile","e","preventDefault","console","log","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","ipfsSubmit","ipfs","add","path","picHash","captureFileAndUploadToIPFS","added","progress","prog","url","error","uploadToIPFS","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,WAA7C,QAAgE,OAAhE,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,kBAAzC;AACA,MAAMC,MAAM,GAAGD,cAAc,CAAC,oCAAD,CAA7B;;AAEA,MAAME,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA;;AACA,QAAMU,WAAW,GAAG,MAAOC,CAAP,IAAa;AAC/BA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMC,IAAI,GAAGJ,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACAG,IAAAA,MAAM,CAACG,iBAAP,CAAyBN,IAAzB;;AACAG,IAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM;AACvBf,MAAAA,aAAa,CAACgB,MAAM,CAACL,MAAM,CAACM,MAAR,CAAP,CAAb;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBS,MAAM,CAACL,MAAM,CAACM,MAAR,CAA5B;AACD,KAHD;;AAIA,WAAOlB,UAAP;AACD,GAZD,CAJoB,CAiBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMmB,UAAU,GAAG,MAAOd,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,UAAMU,MAAM,GAAG,MAAME,IAAI,CAACC,GAAL,CAASrB,UAAT,CAArB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,MAAM,CAACI,IAAnC;AACA,UAAMC,OAAO,GAAGL,MAAM,CAACI,IAAvB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAYU,MAAM,CAACI,IAAnB;AACA,WAAQ,+BAA8BC,OAAQ,EAA9C,CAP8B,CAQ9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GApBD;AAqBA;;AAEA;;;AACA,QAAMC,0BAA0B,GAAG,MAAOnB,CAAP,IAAa;AAC9C,UAAMI,IAAI,GAAGJ,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;;AACA,QAAI;AACF,YAAMc,KAAK,GAAG,MAAM3B,MAAM,CAACuB,GAAP,CAAWZ,IAAX,EAAiB;AACnCiB,QAAAA,QAAQ,EAAGC,IAAD,IAAUpB,OAAO,CAACC,GAAR,CAAa,aAAYmB,IAAK,EAA9B;AADe,OAAjB,CAApB;AAGA,YAAMC,GAAG,GAAI,+BAA8BH,KAAK,CAACH,IAAK,EAAtD;AACAnB,MAAAA,UAAU,CAACyB,GAAD,CAAV;AACA,aAAOA,GAAP;AACD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACdtB,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCqB,KAAtC;AACD;AACF,GAZD;;AAcA,QAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC,QAAI;AACF,YAAMN,KAAK,GAAG,MAAM3B,MAAM,CAACuB,GAAP,CAAWU,IAAX,CAApB;AACA,YAAMH,GAAG,GAAI,+BAA8BH,KAAK,CAACH,IAAK,EAAtD;AACA,aAAOM,GAAP;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACdtB,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCqB,KAAtC;AACD;AACF,GARD;AASA;;;AACA,SAAO;AACL;AACA;AACAzB,IAAAA,WAHK;AAIL;AACA;AACA0B,IAAAA,YANK;AAOLN,IAAAA;AAPK,GAAP;AASD,CA3FD;;GAAMzB,O;;AA6FN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from \"react\";\n\n// import { create } from \"ipfs-http-client\";\n// const ipfs = create({\n//   host: \"ipfs.infura.io\",\n//   port: 5001,\n//   protocol: \"https\",\n// });\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nconst useIPFS = () => {\n  const [ipfsBuffer, setIPFSBuffer] = useState(null);\n  const [fileUrl, setFileUrl] = useState(null);\n  /* ----------------------------------IPFS--------------------------------- */\n  const captureFile = async (e) => {\n    e.preventDefault();\n    console.log(\"File captured\");\n    const file = e.target.files[0];\n    const reader = new window.FileReader();\n    console.log(file);\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      setIPFSBuffer(Buffer(reader.result));\n      console.log(\"Buffer\", Buffer(reader.result));\n    };\n    return ipfsBuffer;\n  };\n  // const captureJSON = () => {\n  //   // e.preventDefault();\n  //   console.log(\"File captured\");\n  //   const stuff = data;\n  //   const str = JSON.stringify(stuff);\n  //   const bytes = new TextEncoder().encode(str);\n  //   const blob = new Blob([bytes], {\n  //     type: \"application/json;charset=utf-8\",\n  //   });\n  //   const reader = new window.FileReader();\n  //   reader.readAsArrayBuffer(blob);\n  //   reader.onloadend = () => {\n  //     setIPFSBuffer(Buffer(reader.result));\n  //     console.log(\"Buffer\", Buffer(reader.result));\n  //   };\n  //   return Buffer(reader.result);\n  // };\n  const ipfsSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"Submitting to IPFS\");\n    const result = await ipfs.add(ipfsBuffer);\n    console.log(\"IPFS RESULT:\", result.path);\n    const picHash = result.path;\n    console.log(result.path);\n    return `https://ipfs.infura.io/ipfs/${picHash}`;\n    //   /* -------------------------------------------------------------------------- */\n    //   /* --------------------------- store on blockchain -------------------------- */\n    //   // Step 2: store file on blockchain\n    //   //  await contract.methods\n    //   //  .set(picHash)\n    //   //  .send({\n    //   //    from: account,\n    //   //  })\n    //   //  .then((res) => setPichash(picHash));\n    // };\n    //   const renderIPFSImage = () => {\n    //     return `https://ipfs.infura.io/ipfs/${picHash}`;\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  const captureFileAndUploadToIPFS = async (e) => {\n    const file = e.target.files[0];\n    try {\n      const added = await client.add(file, {\n        progress: (prog) => console.log(`received: ${prog}`),\n      });\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      setFileUrl(url);\n      return url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n\n  const uploadToIPFS = async (data) => {\n    try {\n      const added = await client.add(data);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      return url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n  return {\n    // web3Modal_address_abi,\n    // ethers_address_abi,\n    captureFile,\n    // captureJSON,\n    // ipfsSubmit,\n    uploadToIPFS,\n    captureFileAndUploadToIPFS,\n  };\n};\n\nexport default useIPFS;\n"]},"metadata":{},"sourceType":"module"}