{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { sha256, sha224 } from \"js-sha256\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport query from \"../../GQL/queries/getMessages\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport useMessages from \"./useMessages\";\nconst NEW_MESSAGE_EVENT = \"newMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChatRoom = () => {\n  _s();\n\n  const previousMessages = useAppSelector(state => state.previousMessages.value);\n  const {\n    messageList,\n    setMessageList,\n    addMessage,\n    setConvoId\n  } = useMessages();\n  const room = useAppSelector(state => state.currentRoom.value);\n  const [messages, setMessages] = useState([]);\n  const [conversationId, setConversationId] = useState(null);\n  const [hashRoom, setHashRoom] = useState(\"\");\n  const socketRef = useRef();\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (previousMessages) {\n      setMessages(previousMessages);\n    }\n  }, [previousMessages]);\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    setHashRoom(room);\n  }, [room, hashRoom]);\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n\n    if (hashRoom !== undefined) {\n      socketRef.current.emit(\"setRoom\", hashRoom);\n    }\n\n    socketRef.current.on(NEW_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        isOwner: message.senderId === socketRef.current.id\n      }; // send the new message to the others in the same room.\n\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect(hashRoom);\n    };\n  }, [hashRoom]);\n  /* -------------------------------------------------------------------------- */\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      room: room\n    });\n    addMessage(room, messageBody);\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  const combineAddresses = (address1, address2) => {\n    const user1 = [];\n    const user2 = [];\n\n    const makeUnique = (address, userArray) => {\n      for (let i in address) {\n        const letter = address[i];\n        userArray.push(letter);\n      }\n    };\n\n    makeUnique(address1, user1);\n    makeUnique(address2, user2);\n    user1.push(...user2);\n    const combinedAddresses = user1;\n    const sorted = combinedAddresses.sort();\n    const room = sorted.join(\"\");\n    const hash = sha256.create();\n    hash.update(room);\n    const hashedRoom = hash.hex();\n    return hashedRoom;\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n\n  return {\n    messages,\n    sendMessage,\n    combineAddresses,\n    conversationId,\n    setConversationId\n  };\n};\n\n_s(useChatRoom, \"PEp8nDLdE7A4xigQJ+hPF9g8VPo=\", false, function () {\n  return [useAppSelector, useMessages, useAppSelector];\n});\n\nexport default useChatRoom;","map":{"version":3,"sources":["/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/CHAT/useChatRoom.js"],"names":["React","useEffect","useRef","useState","useCallback","socketIOClient","sha256","sha224","useAppSelector","useAppDispatch","query","useQuery","useMutation","useMessages","NEW_MESSAGE_EVENT","SOCKET_SERVER_URL","useChatRoom","previousMessages","state","value","messageList","setMessageList","addMessage","setConvoId","room","currentRoom","messages","setMessages","conversationId","setConversationId","hashRoom","setHashRoom","socketRef","current","undefined","emit","on","message","incomingMessage","isOwner","senderId","id","disconnect","sendMessage","messageBody","body","combineAddresses","address1","address2","user1","user2","makeUnique","address","userArray","i","letter","push","combinedAddresses","sorted","sort","join","hash","create","update","hashedRoom","hex"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { sha256, sha224 } from \"js-sha256\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport query from \"../../GQL/queries/getMessages\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport useMessages from \"./useMessages\";\n\nconst NEW_MESSAGE_EVENT = \"newMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChatRoom = () => {\n  const previousMessages = useAppSelector(\n    (state) => state.previousMessages.value\n  );\n  const { messageList, setMessageList, addMessage, setConvoId } = useMessages();\n  const room = useAppSelector((state) => state.currentRoom.value);\n\n  const [messages, setMessages] = useState([]);\n  const [conversationId, setConversationId] = useState(null);\n\n  const [hashRoom, setHashRoom] = useState(\"\");\n  const socketRef = useRef();\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    if (previousMessages) {\n      setMessages(previousMessages);\n    }\n  }, [previousMessages]);\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    setHashRoom(room);\n  }, [room, hashRoom]);\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n\n    if (hashRoom !== undefined) {\n      socketRef.current.emit(\"setRoom\", hashRoom);\n    }\n\n    socketRef.current.on(NEW_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        isOwner: message.senderId === socketRef.current.id,\n      };\n\n      // send the new message to the others in the same room.\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect(hashRoom);\n    };\n  }, [hashRoom]);\n  /* -------------------------------------------------------------------------- */\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      room: room,\n    });\n\n    addMessage(room, messageBody);\n  };\n  /* -------------------------------------------------------------------------- */\n  const combineAddresses = (address1, address2) => {\n    const user1 = [];\n    const user2 = [];\n    const makeUnique = (address, userArray) => {\n      for (let i in address) {\n        const letter = address[i];\n\n        userArray.push(letter);\n      }\n    };\n    makeUnique(address1, user1);\n    makeUnique(address2, user2);\n    user1.push(...user2);\n    const combinedAddresses = user1;\n\n    const sorted = combinedAddresses.sort();\n    const room = sorted.join(\"\");\n\n    const hash = sha256.create();\n    hash.update(room);\n    const hashedRoom = hash.hex();\n\n    return hashedRoom;\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  return {\n    messages,\n    sendMessage,\n    combineAddresses,\n    conversationId,\n    setConversationId,\n  };\n};\n\nexport default useChatRoom;\n"]},"metadata":{},"sourceType":"module"}