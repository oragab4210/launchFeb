{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/FriendList/FriendList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\"; // import styles from \"./Info.module.css\";\n\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../GQL/mutations/EditUser\"; // import { useAppSelector, useAppDispatch } from \"../../\";\n\nimport query from \"../../GQL/queries/CurrentUser\"; // import axios from \"axios\";\n\nimport styles from \"./FriendList.module.css\";\nimport convoExists from \"../../GQL/queries/convoExists\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport useChatRoom from \"../CHAT/useChatRoom\";\nimport addConversationMutation from \"../../GQL/mutations/addConversation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FriendList = () => {\n  _s();\n\n  const {\n    combineAddresses\n  } = useChatRoom();\n  const [user, setUser] = useState(null);\n  const [editUser] = useMutation(mutation);\n  const [addConversation] = useMutation(addConversationMutation);\n  let {\n    loading,\n    error,\n    data\n  } = useQuery(query);\n  const room = useAppSelector(state => state.currentRoom.value);\n  const [hash, setHash] = useState(null);\n  const [convoData, setConvoData] = useState(null);\n  const [convoData2, setConvoData2] = useState(\"\");\n  let [checkIfConvoExists, {\n    loading: convoExistsLoading,\n    error: convoExistsError,\n    data: convoExistsData,\n    refetch\n  }] = useLazyQuery(convoExists, {\n    fetchPolicy: \"no-cache\",\n    // Used for first execution\n    nextFetchPolicy: \"no-cache\",\n    // Used for subsequent executions\n    onCompleted: async () => setConvoData(convoExistsData)\n  });\n  const [friends, setFriends] = useState([]);\n  const [friendName, setFreindName] = useState(\"\");\n  const [friendId, setFriendId] = useState(\"\");\n  const [hi, setHi] = useState(false);\n  const [clicked, setClicked] = useState(false);\n  const [start, setStart] = useState(false);\n  const [end, setEnd] = useState(false);\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (data) {\n      // setFriends([]);\n      const user = data.user2;\n      setUser(user); // console.log(\"zzzzz\", user);\n      // console.log(data.user2.friends, \"hehe\");\n      // console.log(user.friends, \"XXX\");\n\n      setFriends(user.friends); // console.log(friends, \"HAHAHA\");\n      // setFriends(user.friends);\n      // console.log(user);\n    }\n  }, [data]);\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  const deleteFriend = friendId => {\n    editUser({\n      variables: {\n        id: user.id,\n        deleteFriend: friendId\n      },\n      refetchQueries: [{\n        query: query\n      }],\n      awaitRefetchQueries: true\n    }).catch(err => {\n      var _err$graphQLErrors;\n\n      const errors = (_err$graphQLErrors = err.graphQLErrors) === null || _err$graphQLErrors === void 0 ? void 0 : _err$graphQLErrors.map(error => error.message);\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  // const addFriend = (e) => {\n  //   e.preventDefault();\n  //   editUser({\n  //     variables: {\n  //       id: user.id,\n  //       friend: { id: \"617c3466c0d43a4636b754dc\", name: \"Ian\" },\n  //     },\n  //     refetchQueries: [{ query: query }],\n  //     awaitRefetchQueries: true,\n  //   }).catch((err) => {\n  //     const errors = err.graphQLErrors?.map((error) => error.message);\n  //     console.log(errors);\n  //     setFriends([]);\n  //   });\n  // };\n\n  /* -------------------------------------------------------------------------- */\n\n\n  const addConvoToUser = clickedFriendId => {\n    editUser({\n      variables: {\n        id: user.id,\n        addConversation: clickedFriendId\n      },\n      refetchQueries: [{\n        query: query\n      }],\n      awaitRefetchQueries: true\n    }).catch(err => {\n      var _err$graphQLErrors2;\n\n      const errors = (_err$graphQLErrors2 = err.graphQLErrors) === null || _err$graphQLErrors2 === void 0 ? void 0 : _err$graphQLErrors2.map(error => error.message);\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  const startConversation = async (convoId, clickedFriendId) => {\n    checkIfConvoExists({\n      variables: {\n        convoId: convoId\n      }\n    });\n    addConvoToUser(clickedFriendId);\n    setHash(convoId);\n    setClicked(!clicked);\n    setFriendId(clickedFriendId);\n  };\n\n  useEffect(() => {\n    if (convoExistsData && convoExistsLoading === false) {\n      //convoData acts as the old data\n      //so making sure only true if the NEW data is not the same as the OLD data\n      if (convoExistsData !== convoData) {\n        console.log(\"query\", convoExistsData);\n\n        if (convoExistsData.conversationExists !== null) {\n          console.log(\"User Exists\"); // await refetch({ convoId: hash });\n\n          setHash(null);\n          setConvoData2(convoData);\n        } else if (convoExistsData.conversationExists === null) {\n          console.log(\"DNE\");\n          addConversation({\n            variables: {\n              convoId: hash\n            },\n            refetchQueries: [checkIfConvoExists({\n              variables: {\n                convoId: hash\n              },\n              fetchPolicy: \"no-cache\",\n              nextFetchPolicy: \"no-cache\"\n            })],\n            awaitRefetchQueries: true\n          }).catch(err => {\n            var _err$graphQLErrors3;\n\n            const errors = (_err$graphQLErrors3 = err.graphQLErrors) === null || _err$graphQLErrors3 === void 0 ? void 0 : _err$graphQLErrors3.map(error => error.message);\n            console.log(errors);\n          });\n        }\n      }\n    }\n  }, [clicked, convoExistsData !== undefined && convoExistsData]);\n  /* -------------------------------------------------------------------------- */\n\n  const renderFriends = () => {\n    if (friends) {\n      // console.log(friends, \"SUCKER\");\n      return friends.map((friend, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.friend,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: friend.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => [// setHash(combineAddresses(user.id, index)),\n            startConversation(combineAddresses(user.id, friend.id), friend.id)],\n            children: \"Start a Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => [deleteFriend(friend.id)],\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.friendContainer,\n      children: renderFriends()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FriendList, \"2h+u0+qC75YF/X6wWHQQEX9JuKs=\", false, function () {\n  return [useChatRoom, useMutation, useMutation, useQuery, useAppSelector, useLazyQuery];\n});\n\n_c = FriendList;\nexport default FriendList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FriendList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/FriendList/FriendList.js"],"names":["React","useState","useEffect","useCallback","useMutation","useQuery","useLazyQuery","mutation","query","styles","convoExists","useAppSelector","useAppDispatch","useChatRoom","addConversationMutation","FriendList","combineAddresses","user","setUser","editUser","addConversation","loading","error","data","room","state","currentRoom","value","hash","setHash","convoData","setConvoData","convoData2","setConvoData2","checkIfConvoExists","convoExistsLoading","convoExistsError","convoExistsData","refetch","fetchPolicy","nextFetchPolicy","onCompleted","friends","setFriends","friendName","setFreindName","friendId","setFriendId","hi","setHi","clicked","setClicked","start","setStart","end","setEnd","user2","deleteFriend","variables","id","refetchQueries","awaitRefetchQueries","catch","err","errors","graphQLErrors","map","message","console","log","addConvoToUser","clickedFriendId","startConversation","convoId","conversationExists","undefined","renderFriends","friend","index","email","container","friendContainer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n// import styles from \"./Info.module.css\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../GQL/mutations/EditUser\";\n// import { useAppSelector, useAppDispatch } from \"../../\";\nimport query from \"../../GQL/queries/CurrentUser\";\n// import axios from \"axios\";\nimport styles from \"./FriendList.module.css\";\nimport convoExists from \"../../GQL/queries/convoExists\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport useChatRoom from \"../CHAT/useChatRoom\";\nimport addConversationMutation from \"../../GQL/mutations/addConversation\";\n\nconst FriendList = () => {\n  const { combineAddresses } = useChatRoom();\n  const [user, setUser] = useState(null);\n  const [editUser] = useMutation(mutation);\n  const [addConversation] = useMutation(addConversationMutation);\n  let { loading, error, data } = useQuery(query);\n  const room = useAppSelector((state) => state.currentRoom.value);\n  const [hash, setHash] = useState(null);\n  const [convoData, setConvoData] = useState(null);\n  const [convoData2, setConvoData2] = useState(\"\");\n\n  let [\n    checkIfConvoExists,\n    {\n      loading: convoExistsLoading,\n      error: convoExistsError,\n      data: convoExistsData,\n      refetch,\n    },\n  ] = useLazyQuery(convoExists, {\n    fetchPolicy: \"no-cache\", // Used for first execution\n    nextFetchPolicy: \"no-cache\", // Used for subsequent executions\n    onCompleted: async () => setConvoData(convoExistsData),\n  });\n\n  const [friends, setFriends] = useState([]);\n  const [friendName, setFreindName] = useState(\"\");\n  const [friendId, setFriendId] = useState(\"\");\n  const [hi, setHi] = useState(false);\n  const [clicked, setClicked] = useState(false);\n  const [start, setStart] = useState(false);\n  const [end, setEnd] = useState(false);\n\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (data) {\n      // setFriends([]);\n      const user = data.user2;\n\n      setUser(user);\n      // console.log(\"zzzzz\", user);\n      // console.log(data.user2.friends, \"hehe\");\n      // console.log(user.friends, \"XXX\");\n      setFriends(user.friends);\n\n      // console.log(friends, \"HAHAHA\");\n\n      // setFriends(user.friends);\n      // console.log(user);\n    }\n  }, [data]);\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  const deleteFriend = (friendId) => {\n    editUser({\n      variables: {\n        id: user.id,\n        deleteFriend: friendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    }).catch((err) => {\n      const errors = err.graphQLErrors?.map((error) => error.message);\n\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  // const addFriend = (e) => {\n  //   e.preventDefault();\n  //   editUser({\n  //     variables: {\n  //       id: user.id,\n  //       friend: { id: \"617c3466c0d43a4636b754dc\", name: \"Ian\" },\n  //     },\n  //     refetchQueries: [{ query: query }],\n  //     awaitRefetchQueries: true,\n  //   }).catch((err) => {\n  //     const errors = err.graphQLErrors?.map((error) => error.message);\n\n  //     console.log(errors);\n  //     setFriends([]);\n  //   });\n  // };\n  /* -------------------------------------------------------------------------- */\n  const addConvoToUser = (clickedFriendId) => {\n    editUser({\n      variables: {\n        id: user.id,\n        addConversation: clickedFriendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    }).catch((err) => {\n      const errors = err.graphQLErrors?.map((error) => error.message);\n\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  const startConversation = async (convoId, clickedFriendId) => {\n    checkIfConvoExists({\n      variables: {\n        convoId: convoId,\n      },\n    });\n    addConvoToUser(clickedFriendId);\n    setHash(convoId);\n    setClicked(!clicked);\n    setFriendId(clickedFriendId);\n  };\n\n  useEffect(() => {\n    if (convoExistsData && convoExistsLoading === false) {\n      //convoData acts as the old data\n      //so making sure only true if the NEW data is not the same as the OLD data\n      if (convoExistsData !== convoData) {\n        console.log(\"query\", convoExistsData);\n        if (convoExistsData.conversationExists !== null) {\n          console.log(\"User Exists\");\n          // await refetch({ convoId: hash });\n          setHash(null);\n          setConvoData2(convoData);\n        } else if (convoExistsData.conversationExists === null) {\n          console.log(\"DNE\");\n          addConversation({\n            variables: {\n              convoId: hash,\n            },\n            refetchQueries: [\n              checkIfConvoExists({\n                variables: {\n                  convoId: hash,\n                },\n                fetchPolicy: \"no-cache\",\n                nextFetchPolicy: \"no-cache\",\n              }),\n            ],\n\n            awaitRefetchQueries: true,\n          }).catch((err) => {\n            const errors = err.graphQLErrors?.map((error) => error.message);\n\n            console.log(errors);\n          });\n        }\n      }\n    }\n  }, [clicked, convoExistsData !== undefined && convoExistsData]);\n  /* -------------------------------------------------------------------------- */\n\n  const renderFriends = () => {\n    if (friends) {\n      // console.log(friends, \"SUCKER\");\n      return friends.map((friend, index) => {\n        return (\n          <div key={index} className={styles.friend}>\n            <h1>{friend.email}</h1>\n            {/* <h1>{friend.id}</h1> */}\n            <button\n              onClick={() => [\n                // setHash(combineAddresses(user.id, index)),\n                startConversation(\n                  combineAddresses(user.id, friend.id),\n                  friend.id\n                ),\n              ]}\n            >\n              Start a Chat\n            </button>\n            <button onClick={() => [deleteFriend(friend.id)]}>Delete</button>\n          </div>\n        );\n      });\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n  return (\n    <div className={styles.container}>\n      {/* <form action=\"\" className={styles.form}>\n        <label htmlFor=\"\">name</label>\n        <input\n          type=\"text\"\n          onChange={(e) => setFreindName(e.target.value)}\n          value={friendName}\n        />\n        <br />\n        <label htmlFor=\"\">id</label>\n        <input\n          type=\"text\"\n          onChange={(e) => setFriendId(e.target.value)}\n          value={friendId}\n        />\n        <br />\n        <button>submit</button>\n      </form>\n      <h1>-------------------</h1> */}\n      <h1>hi</h1>\n      <div className={styles.friendContainer}>{renderFriends()}</div>\n    </div>\n  );\n};\n\nexport default FriendList;\n"]},"metadata":{},"sourceType":"module"}