{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Navigation/NavBar/NavBar.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./NavBar.module.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport SideNav from \"../SideNav/SideNav\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { setCurrentUser } from \"../../../redux/features/currentUserSlice\";\nimport { setOnlineUsers } from \"../../../redux/features/onlineUsersSlice\";\nimport currentUserQuery from \"../../../GQL/queries/CurrentUser\";\nimport { setSocket } from \"../../../redux/features/socketSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport mutation from \"../../../GQL/mutations/Logout\";\nimport ProfileDropdownInitiator from \"../ProfileDropdownInitiator/ProfileDropdownInitiator\";\nimport TestDropDown from \"../TestDropDown/TestDropDown\";\nimport socketIOClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst NavBar = () => {\n  _s();\n\n  // const { pathname } = useLocation();\n  // const dontShowUp = [\"/\", \"/login\"];\n  // const includedPath = !dontShowUp.includes(pathname);\n  let {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(currentUserQuery);\n  const currentUser = useAppSelector(state => state.currentUser);\n  const dispatch = useAppDispatch(false);\n  const [open, setOpen] = useState(false);\n  const [close, setClose] = useState(false);\n  const [onDropDown, setOnDropDown] = useState(false);\n  const [ableToSetUserOnline, setAbleToSetUserOnline] = useState(false);\n  const [socketIdForLogoutset, setSocketIdForLogout] = useState(null);\n  const socketRef = useRef();\n  /* -------------------------------------------------------------------------- */\n  // useEffect(() => {\n  //   refetch();\n  //   console.log(\"done\");\n  // }, []);\n\n  useEffect(() => {\n    refetch();\n\n    const fetchAccounts = () => {\n      if (data && data.user2) {\n        if (data.user2) {\n          // console.log(data.user2.id, \"NavBar\");\n          dispatch(setCurrentUser(data.user2));\n          setAbleToSetUserOnline(true); // socketRef.current.emit(\"login\", { userId: data.user2.id });\n          // socketRef.current.on(\"onlineUsers\", (data) => {\n          //   console.log(\"hehehe\", data);\n          //   dispatch(setOnlineUsers(data));\n          // });\n          // socketRef.current.on(\"disconnect\", (data) => {\n          //   console.log(\"dis con\", data);\n          // });\n\n          setOpen(true);\n          console.log(\"done\"); // console.log(currentUser);\n        } else {\n          console.log(\"bro\"); // socketRef.current.disconnect();\n        }\n      } else {// socketRef.current.disconnect();\n      }\n    };\n\n    fetchAccounts();\n  }, [data]);\n  useEffect(() => {\n    if (ableToSetUserOnline) {\n      socketRef.current = socketIOClient(SOCKET_SERVER_URL); // dispatch(setSocket(socketRef.current));\n\n      socketRef.current.emit(\"login\", {\n        userId: data.user2.id\n      });\n      socketRef.current.on(\"onlineUsers\", data => {\n        console.log(\"socket if font end\", socketRef.current.id);\n        setSocketIdForLogout(socketRef.current.id);\n        console.log(\"hehehe\", data);\n        const onlineUsers = Object.entries(data);\n        const onlineIds = Array.from(onlineUsers, x => x[1]);\n        console.log(onlineIds);\n        dispatch(setOnlineUsers(onlineIds));\n      });\n      return () => {\n        socketRef.current.disconnect();\n      };\n    }\n  }, [ableToSetUserOnline === true]); // useEffect(() => {\n  //   if (currentUser.id !== null) {\n  //     // console.log(data.user2.id);\n  //     socketRef.current.emit(\"login\", { userId: currentUser.id });\n  //     socketRef.current.on(\"onlineUsers\", (data) => {\n  //       console.log(\"hehehe\", data);\n  //     });\n  //   }\n  // }, []);\n\n  /* -------------------------------------------------------------------------- */\n  // if (includedPath) {\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container0,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(SideNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProfileDropdownInitiator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container69,\n      children: [/*#__PURE__*/_jsxDEV(SideNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TestDropDown, {\n        socketRef: socketRef,\n        socketIdFromNav: socketIdForLogoutset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this); // }\n  //  else {\n  //   return null;\n  // }\n};\n\n_s(NavBar, \"HdT5HhriBku1UlCVoVwYk1dYyGE=\", false, function () {\n  return [useQuery, useAppSelector, useAppDispatch];\n});\n\n_c = NavBar;\nexport default NavBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavBar\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Navigation/NavBar/NavBar.js"],"names":["styles","React","useState","useEffect","useRef","SideNav","useQuery","useMutation","setCurrentUser","setOnlineUsers","currentUserQuery","setSocket","useAppSelector","useAppDispatch","Link","useLocation","mutation","ProfileDropdownInitiator","TestDropDown","socketIOClient","SOCKET_SERVER_URL","NavBar","loading","error","data","refetch","currentUser","state","dispatch","open","setOpen","close","setClose","onDropDown","setOnDropDown","ableToSetUserOnline","setAbleToSetUserOnline","socketIdForLogoutset","setSocketIdForLogout","socketRef","fetchAccounts","user2","console","log","current","emit","userId","id","on","onlineUsers","Object","entries","onlineIds","Array","from","x","disconnect","container0","container","container69"],"mappings":"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","sourcesContent":["import styles from \"./NavBar.module.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport SideNav from \"../SideNav/SideNav\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { setCurrentUser } from \"../../../redux/features/currentUserSlice\";\nimport { setOnlineUsers } from \"../../../redux/features/onlineUsersSlice\";\nimport currentUserQuery from \"../../../GQL/queries/CurrentUser\";\nimport { setSocket } from \"../../../redux/features/socketSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport mutation from \"../../../GQL/mutations/Logout\";\nimport ProfileDropdownInitiator from \"../ProfileDropdownInitiator/ProfileDropdownInitiator\";\nimport TestDropDown from \"../TestDropDown/TestDropDown\";\nimport socketIOClient from \"socket.io-client\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst NavBar = () => {\n  // const { pathname } = useLocation();\n  // const dontShowUp = [\"/\", \"/login\"];\n  // const includedPath = !dontShowUp.includes(pathname);\n\n  let { loading, error, data, refetch } = useQuery(currentUserQuery);\n\n  const currentUser = useAppSelector((state) => state.currentUser);\n\n  const dispatch = useAppDispatch(false);\n  const [open, setOpen] = useState(false);\n  const [close, setClose] = useState(false);\n  const [onDropDown, setOnDropDown] = useState(false);\n  const [ableToSetUserOnline, setAbleToSetUserOnline] = useState(false);\n  const [socketIdForLogoutset, setSocketIdForLogout] = useState(null);\n  const socketRef = useRef();\n\n  /* -------------------------------------------------------------------------- */\n  // useEffect(() => {\n  //   refetch();\n  //   console.log(\"done\");\n  // }, []);\n  useEffect(() => {\n    refetch();\n    const fetchAccounts = () => {\n      if (data && data.user2) {\n        if (data.user2) {\n          // console.log(data.user2.id, \"NavBar\");\n          dispatch(setCurrentUser(data.user2));\n          setAbleToSetUserOnline(true);\n          // socketRef.current.emit(\"login\", { userId: data.user2.id });\n          // socketRef.current.on(\"onlineUsers\", (data) => {\n          //   console.log(\"hehehe\", data);\n          //   dispatch(setOnlineUsers(data));\n          // });\n          // socketRef.current.on(\"disconnect\", (data) => {\n          //   console.log(\"dis con\", data);\n          // });\n\n          setOpen(true);\n          console.log(\"done\");\n\n          // console.log(currentUser);\n        } else {\n          console.log(\"bro\");\n          // socketRef.current.disconnect();\n        }\n      } else {\n        // socketRef.current.disconnect();\n      }\n    };\n    fetchAccounts();\n  }, [data]);\n\n  useEffect(() => {\n    if (ableToSetUserOnline) {\n      socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n      // dispatch(setSocket(socketRef.current));\n      socketRef.current.emit(\"login\", { userId: data.user2.id });\n\n      socketRef.current.on(\"onlineUsers\", (data) => {\n        console.log(\"socket if font end\", socketRef.current.id);\n        setSocketIdForLogout(socketRef.current.id);\n        console.log(\"hehehe\", data);\n        const onlineUsers = Object.entries(data);\n        const onlineIds = Array.from(onlineUsers, (x) => x[1]);\n        console.log(onlineIds);\n        dispatch(setOnlineUsers(onlineIds));\n      });\n      return () => {\n        socketRef.current.disconnect();\n      };\n    }\n  }, [ableToSetUserOnline === true]);\n\n  // useEffect(() => {\n  //   if (currentUser.id !== null) {\n  //     // console.log(data.user2.id);\n  //     socketRef.current.emit(\"login\", { userId: currentUser.id });\n\n  //     socketRef.current.on(\"onlineUsers\", (data) => {\n  //       console.log(\"hehehe\", data);\n  //     });\n  //   }\n  // }, []);\n\n  /* -------------------------------------------------------------------------- */\n\n  // if (includedPath) {\n  return (\n    <div className={styles.container0}>\n      <div className={styles.container}>\n        <SideNav />\n        <ProfileDropdownInitiator />\n        {/* <TestDropDown /> */}\n      </div>\n      <div className={styles.container69}>\n        <SideNav />\n        <TestDropDown\n          socketRef={socketRef}\n          socketIdFromNav={socketIdForLogoutset}\n        />\n      </div>\n\n      {/* <div className={styles.test}>\n        <TestDropDown />\n      </div> */}\n    </div>\n  );\n  // }\n  //  else {\n  //   return null;\n  // }\n};\n\nexport default NavBar;\n"]},"metadata":{},"sourceType":"module"}