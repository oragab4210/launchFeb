{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Friends/FriendList/FriendList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../../GQL/mutations/EditUser\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport styles from \"./FriendList.module.css\";\nimport convoExists from \"../../../GQL/queries/convoExists\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport useChatRoom from \"../../CHAT/useChatRoom\";\nimport addConversationMutation from \"../../../GQL/mutations/addConversation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FriendList = () => {\n  _s();\n\n  const currentUser = useAppSelector(state => state.currentUser);\n  const {\n    combineAddresses\n  } = useChatRoom();\n  const [editUser] = useMutation(mutation);\n  const [addConversation] = useMutation(addConversationMutation);\n  let {\n    loading,\n    error,\n    data\n  } = useQuery(query);\n  const room = useAppSelector(state => state.currentRoom.value);\n  const [hash, setHash] = useState(null);\n  const [convoData, setConvoData] = useState(null);\n  const [convoData2, setConvoData2] = useState(\"\");\n  let [checkIfConvoExists, {\n    loading: convoExistsLoading,\n    error: convoExistsError,\n    data: convoExistsData,\n    refetch\n  }] = useLazyQuery(convoExists, {\n    fetchPolicy: \"no-cache\",\n    // Used for first execution\n    nextFetchPolicy: \"no-cache\",\n    // Used for subsequent executions\n    onCompleted: async () => setConvoData(convoExistsData)\n  });\n  const [friends, setFriends] = useState([]);\n  const [friendId, setFriendId] = useState(\"\");\n  const [clicked, setClicked] = useState(false);\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  const deleteFriend = friendId => {\n    editUser({\n      variables: {\n        id: user.id,\n        deleteFriend: friendId\n      },\n      refetchQueries: [{\n        query: query\n      }],\n      awaitRefetchQueries: true\n    }).catch(err => {\n      var _err$graphQLErrors;\n\n      const errors = (_err$graphQLErrors = err.graphQLErrors) === null || _err$graphQLErrors === void 0 ? void 0 : _err$graphQLErrors.map(error => error.message);\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  // const addFriend = (e) => {\n  //   e.preventDefault();\n  //   editUser({\n  //     variables: {\n  //       id: user.id,\n  //       friend: { id: \"617c3466c0d43a4636b754dc\", name: \"Ian\" },\n  //     },\n  //     refetchQueries: [{ query: query }],\n  //     awaitRefetchQueries: true,\n  //   }).catch((err) => {\n  //     const errors = err.graphQLErrors?.map((error) => error.message);\n  //     console.log(errors);\n  //     setFriends([]);\n  //   });\n  // };\n\n  /* -------------------------------------------------------------------------- */\n\n\n  const addConvoToUser = clickedFriendId => {\n    editUser({\n      variables: {\n        id: user.id,\n        addConversation: clickedFriendId\n      },\n      refetchQueries: [{\n        query: query\n      }],\n      awaitRefetchQueries: true\n    }).catch(err => {\n      var _err$graphQLErrors2;\n\n      const errors = (_err$graphQLErrors2 = err.graphQLErrors) === null || _err$graphQLErrors2 === void 0 ? void 0 : _err$graphQLErrors2.map(error => error.message);\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  const startConversation = async (convoId, clickedFriendId) => {\n    checkIfConvoExists({\n      variables: {\n        convoId: convoId\n      }\n    });\n    addConvoToUser(clickedFriendId);\n    setHash(convoId);\n    setClicked(!clicked);\n    setFriendId(clickedFriendId);\n  };\n\n  useEffect(() => {\n    if (convoExistsData && convoExistsLoading === false) {\n      //convoData acts as the old data\n      //so making sure only true if the NEW data is not the same as the OLD data\n      if (convoExistsData !== convoData) {\n        console.log(\"query\", convoExistsData);\n\n        if (convoExistsData.conversationExists !== null) {\n          console.log(\"User Exists\"); // await refetch({ convoId: hash });\n\n          setHash(null);\n          setConvoData2(convoData);\n        } else if (convoExistsData.conversationExists === null) {\n          console.log(\"DNE\");\n          /* ------------------------ creating new conversation ----------------------- */\n\n          addConversation({\n            variables: {\n              convoId: hash\n            },\n            refetchQueries: [checkIfConvoExists({\n              variables: {\n                convoId: hash\n              },\n              fetchPolicy: \"no-cache\",\n              nextFetchPolicy: \"no-cache\"\n            })],\n            awaitRefetchQueries: true\n          }).catch(err => {\n            var _err$graphQLErrors3;\n\n            const errors = (_err$graphQLErrors3 = err.graphQLErrors) === null || _err$graphQLErrors3 === void 0 ? void 0 : _err$graphQLErrors3.map(error => error.message);\n            console.log(errors);\n          });\n        }\n      }\n    }\n  }, [clicked, convoExistsData !== undefined && convoExistsData]);\n  /* -------------------------------------------------------------------------- */\n\n  const renderFriends = () => {\n    if (friends) {\n      // console.log(friends, \"SUCKER\");\n      return friends.map((friend, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.friend,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: styles.name,\n            children: friend.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttons,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.startChat,\n              onClick: () => [// setHash(combineAddresses(user.id, index)),\n              startConversation(combineAddresses(user.id, friend.id), friend.id)],\n              children: \"Start a Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.delete,\n              onClick: () => [deleteFriend(friend.id)],\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: renderFriends()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 10\n  }, this);\n};\n\n_s(FriendList, \"nv/lIoZVSFpEFgFQnldbJJIOYUg=\", false, function () {\n  return [useAppSelector, useChatRoom, useMutation, useMutation, useQuery, useAppSelector, useLazyQuery];\n});\n\n_c = FriendList;\nexport default FriendList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FriendList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Friends/FriendList/FriendList.js"],"names":["React","useState","useEffect","useCallback","useMutation","useQuery","useLazyQuery","mutation","query","styles","convoExists","useAppSelector","useAppDispatch","useChatRoom","addConversationMutation","FriendList","currentUser","state","combineAddresses","editUser","addConversation","loading","error","data","room","currentRoom","value","hash","setHash","convoData","setConvoData","convoData2","setConvoData2","checkIfConvoExists","convoExistsLoading","convoExistsError","convoExistsData","refetch","fetchPolicy","nextFetchPolicy","onCompleted","friends","setFriends","friendId","setFriendId","clicked","setClicked","deleteFriend","variables","id","user","refetchQueries","awaitRefetchQueries","catch","err","errors","graphQLErrors","map","message","console","log","addConvoToUser","clickedFriendId","startConversation","convoId","conversationExists","undefined","renderFriends","friend","index","name","email","buttons","startChat","delete","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../../GQL/mutations/EditUser\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport styles from \"./FriendList.module.css\";\nimport convoExists from \"../../../GQL/queries/convoExists\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport useChatRoom from \"../../CHAT/useChatRoom\";\nimport addConversationMutation from \"../../../GQL/mutations/addConversation\";\n\nconst FriendList = () => {\n  const currentUser = useAppSelector((state) => state.currentUser);\n  const { combineAddresses } = useChatRoom();\n  const [editUser] = useMutation(mutation);\n  const [addConversation] = useMutation(addConversationMutation);\n  let { loading, error, data } = useQuery(query);\n  const room = useAppSelector((state) => state.currentRoom.value);\n  const [hash, setHash] = useState(null);\n  const [convoData, setConvoData] = useState(null);\n  const [convoData2, setConvoData2] = useState(\"\");\n\n  let [\n    checkIfConvoExists,\n    {\n      loading: convoExistsLoading,\n      error: convoExistsError,\n      data: convoExistsData,\n      refetch,\n    },\n  ] = useLazyQuery(convoExists, {\n    fetchPolicy: \"no-cache\", // Used for first execution\n    nextFetchPolicy: \"no-cache\", // Used for subsequent executions\n    onCompleted: async () => setConvoData(convoExistsData),\n  });\n\n  const [friends, setFriends] = useState([]);\n\n  const [friendId, setFriendId] = useState(\"\");\n\n  const [clicked, setClicked] = useState(false);\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  const deleteFriend = (friendId) => {\n    editUser({\n      variables: {\n        id: user.id,\n        deleteFriend: friendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    }).catch((err) => {\n      const errors = err.graphQLErrors?.map((error) => error.message);\n\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  // const addFriend = (e) => {\n  //   e.preventDefault();\n  //   editUser({\n  //     variables: {\n  //       id: user.id,\n  //       friend: { id: \"617c3466c0d43a4636b754dc\", name: \"Ian\" },\n  //     },\n  //     refetchQueries: [{ query: query }],\n  //     awaitRefetchQueries: true,\n  //   }).catch((err) => {\n  //     const errors = err.graphQLErrors?.map((error) => error.message);\n\n  //     console.log(errors);\n  //     setFriends([]);\n  //   });\n  // };\n  /* -------------------------------------------------------------------------- */\n  const addConvoToUser = (clickedFriendId) => {\n    editUser({\n      variables: {\n        id: user.id,\n        addConversation: clickedFriendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    }).catch((err) => {\n      const errors = err.graphQLErrors?.map((error) => error.message);\n\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  const startConversation = async (convoId, clickedFriendId) => {\n    checkIfConvoExists({\n      variables: {\n        convoId: convoId,\n      },\n    });\n    addConvoToUser(clickedFriendId);\n    setHash(convoId);\n    setClicked(!clicked);\n    setFriendId(clickedFriendId);\n  };\n\n  useEffect(() => {\n    if (convoExistsData && convoExistsLoading === false) {\n      //convoData acts as the old data\n      //so making sure only true if the NEW data is not the same as the OLD data\n      if (convoExistsData !== convoData) {\n        console.log(\"query\", convoExistsData);\n        if (convoExistsData.conversationExists !== null) {\n          console.log(\"User Exists\");\n          // await refetch({ convoId: hash });\n          setHash(null);\n          setConvoData2(convoData);\n        } else if (convoExistsData.conversationExists === null) {\n          console.log(\"DNE\");\n          /* ------------------------ creating new conversation ----------------------- */\n          addConversation({\n            variables: {\n              convoId: hash,\n            },\n            refetchQueries: [\n              checkIfConvoExists({\n                variables: {\n                  convoId: hash,\n                },\n                fetchPolicy: \"no-cache\",\n                nextFetchPolicy: \"no-cache\",\n              }),\n            ],\n\n            awaitRefetchQueries: true,\n          }).catch((err) => {\n            const errors = err.graphQLErrors?.map((error) => error.message);\n\n            console.log(errors);\n          });\n        }\n      }\n    }\n  }, [clicked, convoExistsData !== undefined && convoExistsData]);\n  /* -------------------------------------------------------------------------- */\n\n  const renderFriends = () => {\n    if (friends) {\n      // console.log(friends, \"SUCKER\");\n      return friends.map((friend, index) => {\n        return (\n          <div key={index} className={styles.friend}>\n            <h1 className={styles.name}>{friend.email}</h1>\n            {/* <h1>{friend.id}</h1> */}\n            <div className={styles.buttons}>\n              <button\n                className={styles.startChat}\n                onClick={() => [\n                  // setHash(combineAddresses(user.id, index)),\n                  startConversation(\n                    combineAddresses(user.id, friend.id),\n                    friend.id\n                  ),\n                ]}\n              >\n                Start a Chat\n              </button>\n              <button\n                className={styles.delete}\n                onClick={() => [deleteFriend(friend.id)]}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        );\n      });\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n  return <div className={styles.container}>{renderFriends()}</div>;\n};\n\nexport default FriendList;\n"]},"metadata":{},"sourceType":"module"}