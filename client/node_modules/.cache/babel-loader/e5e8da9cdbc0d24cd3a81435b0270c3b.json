{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Friends/FriendList/FriendList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../../GQL/mutations/editUser\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport styles from \"./FriendList.module.css\";\nimport convoExists from \"../../../GQL/queries/convoExists\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport useChatRoom from \"../../CHAT/useChatRoom\";\nimport addConversationMutation from \"../../../GQL/mutations/addConversation\";\nimport FadeIn from \"react-fade-in\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FriendList = _ref => {\n  _s();\n\n  let {\n    friendListOpen,\n    setFriendListOpen\n  } = _ref;\n  const onlineUsers = useAppSelector(state => state.onlineUsers.value);\n  const currentUser = useAppSelector(state => state.currentUser);\n  const {\n    combineAddresses\n  } = useChatRoom();\n  const [editUser] = useMutation(mutation);\n  const [addConversation] = useMutation(addConversationMutation);\n  let {\n    loading,\n    error,\n    data\n  } = useQuery(query);\n  const room = useAppSelector(state => state.currentRoom.value);\n  const [hash, setHash] = useState(null);\n  const [convoData, setConvoData] = useState(null);\n  const [convoData2, setConvoData2] = useState(\"\");\n  const [friends, setFriends] = useState([]);\n  const [friendId, setFriendId] = useState(\"\");\n  const [clicked, setClicked] = useState(false);\n  let [checkIfConvoExists, {\n    loading: convoExistsLoading,\n    error: convoExistsError,\n    data: convoExistsData,\n    refetch\n  }] = useLazyQuery(convoExists, {\n    fetchPolicy: \"no-cache\",\n    // Used for first execution\n    nextFetchPolicy: \"no-cache\",\n    // Used for subsequent executions\n    onCompleted: async () => setConvoData(convoExistsData)\n  });\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    setFriends(currentUser.friends);\n    console.log(\"brooo\", currentUser.friends);\n    console.log(\"please\", currentUser);\n  });\n  /* -------------------------------------------------------------------------- */\n\n  const deleteFriend = friendId => {\n    editUser({\n      variables: {\n        id: currentUser.id,\n        deleteFriend: friendId\n      },\n      refetchQueries: [{\n        query: query\n      }],\n      awaitRefetchQueries: true\n    }).then(editUser({\n      variables: {\n        id: currentUser.id,\n        deleteConversation: friendId\n      },\n      refetchQueries: [{\n        query: query\n      }],\n      awaitRefetchQueries: true\n    }).catch(err => {\n      var _err$graphQLErrors;\n\n      const errors = (_err$graphQLErrors = err.graphQLErrors) === null || _err$graphQLErrors === void 0 ? void 0 : _err$graphQLErrors.map(error => error.message);\n      console.log(errors);\n    })).catch(err => {\n      var _err$graphQLErrors2;\n\n      const errors = (_err$graphQLErrors2 = err.graphQLErrors) === null || _err$graphQLErrors2 === void 0 ? void 0 : _err$graphQLErrors2.map(error => error.message);\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n\n  const addConvoToUser = clickedFriendId => {\n    editUser({\n      variables: {\n        id: currentUser.id,\n        addConversation: clickedFriendId\n      },\n      refetchQueries: [{\n        query: query\n      }],\n      awaitRefetchQueries: true\n    }).catch(err => {\n      var _err$graphQLErrors3;\n\n      const errors = (_err$graphQLErrors3 = err.graphQLErrors) === null || _err$graphQLErrors3 === void 0 ? void 0 : _err$graphQLErrors3.map(error => error.message);\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  const startConversation = async (convoId, clickedFriendId) => {\n    checkIfConvoExists({\n      variables: {\n        convoId: convoId\n      }\n    });\n    addConvoToUser(clickedFriendId);\n    setHash(convoId);\n    setClicked(!clicked);\n    setFriendId(clickedFriendId);\n  };\n\n  useEffect(() => {\n    if (convoExistsData && convoExistsLoading === false) {\n      //convoData acts as the old data\n      //so making sure only true if the NEW data is not the same as the OLD data\n      if (convoExistsData !== convoData) {\n        console.log(\"query\", convoExistsData);\n\n        if (convoExistsData.conversationExists !== null) {\n          console.log(\"User Exists\"); // await refetch({ convoId: hash });\n\n          setHash(null);\n          setConvoData2(convoData);\n        } else if (convoExistsData.conversationExists === null) {\n          console.log(\"DNE\");\n          /* ------------------------ creating new conversation ----------------------- */\n\n          addConversation({\n            variables: {\n              convoId: hash\n            },\n            refetchQueries: [checkIfConvoExists({\n              variables: {\n                convoId: hash\n              },\n              fetchPolicy: \"no-cache\",\n              nextFetchPolicy: \"no-cache\"\n            })],\n            awaitRefetchQueries: true\n          }).catch(err => {\n            var _err$graphQLErrors4;\n\n            const errors = (_err$graphQLErrors4 = err.graphQLErrors) === null || _err$graphQLErrors4 === void 0 ? void 0 : _err$graphQLErrors4.map(error => error.message);\n            console.log(errors);\n          });\n        }\n      }\n    }\n  }, [clicked, convoExistsData !== undefined && convoExistsData]);\n  /* -------------------------------------------------------------------------- */\n\n  const renderFriends = () => {\n    const converstationIds = Array.from(currentUser.conversations, x => x.id);\n    console.log(\"FRIENDS FINAL\", friends);\n\n    if (friends) {\n      return friends.map((friend, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.friendContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.nameEmailContainer,\n            children: [friend.profilePic ? /*#__PURE__*/_jsxDEV(\"img\", {\n              className: styles.friendProfilePic,\n              src: friend.profilePic,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              className: styles.friendProfilePic,\n              src: \"https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8cHJvZmlsZXxlbnwwfHwwfHw%3D&w=1000&q=80\",\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: styles.name,\n              children: friend.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), onlineUsers.includes(friend.id) ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.online\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.online\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttons,\n            children: [!converstationIds.includes(friend.id) ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.startChat,\n              onClick: () => [// setHash(combineAddresses(user.id, index)),\n              startConversation(combineAddresses(currentUser.id, friend.id), friend.id)],\n              children: \"Start a Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.chatStarted // onClick={() => [\n              //   // setHash(combineAddresses(user.id, index)),\n              //   startConversation(\n              //     combineAddresses(currentUser.id, friend.id),\n              //     friend.id\n              //   ),\n              // ]}\n              ,\n              children: \"Start a Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.delete,\n              onClick: () => [deleteFriend(friend.id)],\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.titleContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.backArrowContainer,\n        onClick: () => setFriendListOpen(false),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Find Friends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.backArrow,\n          children: \" \\u21AA \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Friends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.friendListContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.friendListContainerCenter,\n        children: /*#__PURE__*/_jsxDEV(FadeIn, {\n          children: renderFriends()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FriendList, \"L5Y5n722XLvZgu7QNRTBy9rUJfw=\", false, function () {\n  return [useAppSelector, useAppSelector, useChatRoom, useMutation, useMutation, useQuery, useAppSelector, useLazyQuery];\n});\n\n_c = FriendList;\nexport default FriendList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FriendList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Friends/FriendList/FriendList.js"],"names":["React","useState","useEffect","useCallback","useMutation","useQuery","useLazyQuery","mutation","query","styles","convoExists","useAppSelector","useAppDispatch","useChatRoom","addConversationMutation","FadeIn","FriendList","friendListOpen","setFriendListOpen","onlineUsers","state","value","currentUser","combineAddresses","editUser","addConversation","loading","error","data","room","currentRoom","hash","setHash","convoData","setConvoData","convoData2","setConvoData2","friends","setFriends","friendId","setFriendId","clicked","setClicked","checkIfConvoExists","convoExistsLoading","convoExistsError","convoExistsData","refetch","fetchPolicy","nextFetchPolicy","onCompleted","console","log","deleteFriend","variables","id","refetchQueries","awaitRefetchQueries","then","deleteConversation","catch","err","errors","graphQLErrors","map","message","addConvoToUser","clickedFriendId","startConversation","convoId","conversationExists","undefined","renderFriends","converstationIds","Array","from","conversations","x","friend","index","friendContainer","nameEmailContainer","profilePic","friendProfilePic","name","email","includes","online","buttons","startChat","chatStarted","delete","container","titleContainer","backArrowContainer","backArrow","friendListContainer","friendListContainerCenter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../../GQL/mutations/editUser\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport styles from \"./FriendList.module.css\";\nimport convoExists from \"../../../GQL/queries/convoExists\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport useChatRoom from \"../../CHAT/useChatRoom\";\nimport addConversationMutation from \"../../../GQL/mutations/addConversation\";\nimport FadeIn from \"react-fade-in\";\n\nconst FriendList = ({ friendListOpen, setFriendListOpen }) => {\n  const onlineUsers = useAppSelector((state) => state.onlineUsers.value);\n  const currentUser = useAppSelector((state) => state.currentUser);\n  const { combineAddresses } = useChatRoom();\n  const [editUser] = useMutation(mutation);\n  const [addConversation] = useMutation(addConversationMutation);\n  let { loading, error, data } = useQuery(query);\n  const room = useAppSelector((state) => state.currentRoom.value);\n  const [hash, setHash] = useState(null);\n  const [convoData, setConvoData] = useState(null);\n  const [convoData2, setConvoData2] = useState(\"\");\n  const [friends, setFriends] = useState([]);\n  const [friendId, setFriendId] = useState(\"\");\n  const [clicked, setClicked] = useState(false);\n  let [\n    checkIfConvoExists,\n    {\n      loading: convoExistsLoading,\n      error: convoExistsError,\n      data: convoExistsData,\n      refetch,\n    },\n  ] = useLazyQuery(convoExists, {\n    fetchPolicy: \"no-cache\", // Used for first execution\n    nextFetchPolicy: \"no-cache\", // Used for subsequent executions\n    onCompleted: async () => setConvoData(convoExistsData),\n  });\n\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    setFriends(currentUser.friends);\n    console.log(\"brooo\", currentUser.friends);\n    console.log(\"please\", currentUser);\n  });\n  /* -------------------------------------------------------------------------- */\n\n  const deleteFriend = (friendId) => {\n    editUser({\n      variables: {\n        id: currentUser.id,\n        deleteFriend: friendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    })\n      .then(\n        editUser({\n          variables: {\n            id: currentUser.id,\n            deleteConversation: friendId,\n          },\n          refetchQueries: [{ query: query }],\n          awaitRefetchQueries: true,\n        }).catch((err) => {\n          const errors = err.graphQLErrors?.map((error) => error.message);\n\n          console.log(errors);\n        })\n      )\n      .catch((err) => {\n        const errors = err.graphQLErrors?.map((error) => error.message);\n\n        console.log(errors);\n      });\n  };\n  /* -------------------------------------------------------------------------- */\n  /* -------------------------------------------------------------------------- */\n  const addConvoToUser = (clickedFriendId) => {\n    editUser({\n      variables: {\n        id: currentUser.id,\n        addConversation: clickedFriendId,\n      },\n      refetchQueries: [{ query: query }],\n      awaitRefetchQueries: true,\n    }).catch((err) => {\n      const errors = err.graphQLErrors?.map((error) => error.message);\n\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n  const startConversation = async (convoId, clickedFriendId) => {\n    checkIfConvoExists({\n      variables: {\n        convoId: convoId,\n      },\n    });\n    addConvoToUser(clickedFriendId);\n    setHash(convoId);\n    setClicked(!clicked);\n    setFriendId(clickedFriendId);\n  };\n\n  useEffect(() => {\n    if (convoExistsData && convoExistsLoading === false) {\n      //convoData acts as the old data\n      //so making sure only true if the NEW data is not the same as the OLD data\n      if (convoExistsData !== convoData) {\n        console.log(\"query\", convoExistsData);\n        if (convoExistsData.conversationExists !== null) {\n          console.log(\"User Exists\");\n          // await refetch({ convoId: hash });\n          setHash(null);\n          setConvoData2(convoData);\n        } else if (convoExistsData.conversationExists === null) {\n          console.log(\"DNE\");\n          /* ------------------------ creating new conversation ----------------------- */\n          addConversation({\n            variables: {\n              convoId: hash,\n            },\n            refetchQueries: [\n              checkIfConvoExists({\n                variables: {\n                  convoId: hash,\n                },\n                fetchPolicy: \"no-cache\",\n                nextFetchPolicy: \"no-cache\",\n              }),\n            ],\n\n            awaitRefetchQueries: true,\n          }).catch((err) => {\n            const errors = err.graphQLErrors?.map((error) => error.message);\n\n            console.log(errors);\n          });\n        }\n      }\n    }\n  }, [clicked, convoExistsData !== undefined && convoExistsData]);\n  /* -------------------------------------------------------------------------- */\n\n  const renderFriends = () => {\n    const converstationIds = Array.from(currentUser.conversations, (x) => x.id);\n    console.log(\"FRIENDS FINAL\", friends);\n    if (friends) {\n      return friends.map((friend, index) => {\n        return (\n          <div key={index} className={styles.friendContainer}>\n            <div className={styles.nameEmailContainer}>\n              {friend.profilePic ? (\n                <img\n                  className={styles.friendProfilePic}\n                  src={friend.profilePic}\n                  alt=\"\"\n                />\n              ) : (\n                <img\n                  className={styles.friendProfilePic}\n                  src=\"https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8cHJvZmlsZXxlbnwwfHwwfHw%3D&w=1000&q=80\"\n                  alt=\"\"\n                />\n              )}\n              <h3 className={styles.name}>{friend.email}</h3>\n              {onlineUsers.includes(friend.id) ? (\n                <div className={styles.online}></div>\n              ) : (\n                <div className={styles.online}></div>\n              )}\n            </div>\n\n            {/* <h1>{friend.id}</h1> */}\n            <div className={styles.buttons}>\n              {!converstationIds.includes(friend.id) ? (\n                <button\n                  className={styles.startChat}\n                  onClick={() => [\n                    // setHash(combineAddresses(user.id, index)),\n                    startConversation(\n                      combineAddresses(currentUser.id, friend.id),\n                      friend.id\n                    ),\n                  ]}\n                >\n                  Start a Chat\n                </button>\n              ) : (\n                <button\n                  className={styles.chatStarted}\n                  // onClick={() => [\n                  //   // setHash(combineAddresses(user.id, index)),\n                  //   startConversation(\n                  //     combineAddresses(currentUser.id, friend.id),\n                  //     friend.id\n                  //   ),\n                  // ]}\n                >\n                  Start a Chat\n                </button>\n              )}\n              <button\n                className={styles.delete}\n                onClick={() => [deleteFriend(friend.id)]}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        );\n      });\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleContainer}>\n        <div\n          className={styles.backArrowContainer}\n          onClick={() => setFriendListOpen(false)}\n        >\n          <p>Find Friends</p>\n          <span className={styles.backArrow}> &#x21AA; </span>\n        </div>\n\n        <h3>Friends</h3>\n      </div>\n      <div className={styles.friendListContainer}>\n        <div className={styles.friendListContainerCenter}>\n          <FadeIn>{renderFriends()}</FadeIn>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FriendList;\n"]},"metadata":{},"sourceType":"module"}