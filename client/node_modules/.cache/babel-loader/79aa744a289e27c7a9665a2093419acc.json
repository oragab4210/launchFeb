{"ast":null,"code":"import _toConsumableArray from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState,useCallback}from\"react\";import socketIOClient from\"socket.io-client\";import{sha256,sha224}from\"js-sha256\";import{useAppSelector,useAppDispatch}from\"../../redux/hooks\";import{useQuery,useMutation}from\"@apollo/client\";import useMessages from\"./useMessages\";var NEW_MESSAGE_EVENT=\"newMessage\";var SOCKET_SERVER_URL=\"http://localhost:4000\";var useChatRoom=function useChatRoom(){var previousMessages=useAppSelector(function(state){return state.previousMessages.value;});var _useMessages=useMessages(),addMessage=_useMessages.addMessage;var room=useAppSelector(function(state){return state.currentRoom.value;});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),conversationId=_useState4[0],setConversationId=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),hashRoom=_useState6[0],setHashRoom=_useState6[1];var socketRef=useRef();/* -------------------------------------------------------------------------- */useEffect(function(){if(previousMessages){setMessages(previousMessages);}},[previousMessages]);/* -------------------------------------------------------------------------- */ /* -------------------------------------------------------------------------- */useEffect(function(){setHashRoom(room);},[room,hashRoom]);/* -------------------------------------------------------------------------- */useEffect(function(){socketRef.current=socketIOClient(SOCKET_SERVER_URL);if(hashRoom!==undefined){socketRef.current.emit(\"setRoom\",hashRoom);}socketRef.current.on(NEW_MESSAGE_EVENT,function(message){var incomingMessage=_objectSpread(_objectSpread({},message),{},{isOwner:message.senderId===socketRef.current.id});// send the new message to the others in the same room.\nsetMessages(function(messages){return[].concat(_toConsumableArray(messages),[incomingMessage]);});});return function(){socketRef.current.disconnect(hashRoom);};},[hashRoom]);/* -------------------------------------------------------------------------- */var sendMessage=function sendMessage(messageBody){socketRef.current.emit(NEW_MESSAGE_EVENT,{body:messageBody,senderId:socketRef.current.id,room:room});addMessage(room,messageBody);};/* -------------------------------------------------------------------------- */var combineAddresses=function combineAddresses(address1,address2){var user1=[];var user2=[];var makeUnique=function makeUnique(address,userArray){for(var i in address){var letter=address[i];userArray.push(letter);}};makeUnique(address1,user1);makeUnique(address2,user2);user1.push.apply(user1,user2);var combinedAddresses=user1;var sorted=combinedAddresses.sort();var room=sorted.join(\"\");var hash=sha256.create();hash.update(room);var hashedRoom=hash.hex();return hashedRoom;};/* -------------------------------------------------------------------------- */ /* -------------------------------------------------------------------------- */return{messages:messages,sendMessage:sendMessage,combineAddresses:combineAddresses,conversationId:conversationId,setConversationId:setConversationId};};export default useChatRoom;","map":{"version":3,"sources":["/Users/omarragab/Documents/test/launchFeb/client/src/components/CHAT/useChatRoom.js"],"names":["React","useEffect","useRef","useState","useCallback","socketIOClient","sha256","sha224","useAppSelector","useAppDispatch","useQuery","useMutation","useMessages","NEW_MESSAGE_EVENT","SOCKET_SERVER_URL","useChatRoom","previousMessages","state","value","addMessage","room","currentRoom","messages","setMessages","conversationId","setConversationId","hashRoom","setHashRoom","socketRef","current","undefined","emit","on","message","incomingMessage","isOwner","senderId","id","disconnect","sendMessage","messageBody","body","combineAddresses","address1","address2","user1","user2","makeUnique","address","userArray","i","letter","push","combinedAddresses","sorted","sort","join","hash","create","update","hashedRoom","hex"],"mappings":"4fAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,CAA6CC,WAA7C,KAAgE,OAAhE,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,OAASC,MAAT,CAAiBC,MAAjB,KAA+B,WAA/B,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,mBAA/C,CACA,OAASC,QAAT,CAAmBC,WAAnB,KAAsC,gBAAtC,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,YAA1B,CACA,GAAMC,CAAAA,iBAAiB,CAAG,uBAA1B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAMC,CAAAA,gBAAgB,CAAGR,cAAc,CACrC,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACD,gBAAN,CAAuBE,KAAlC,EADqC,CAAvC,CAGA,iBAAuBN,WAAW,EAAlC,CAAQO,UAAR,cAAQA,UAAR,CACA,GAAMC,CAAAA,IAAI,CAAGZ,cAAc,CAAC,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACI,WAAN,CAAkBH,KAA7B,EAAD,CAA3B,CAEA,cAAgCf,QAAQ,CAAC,EAAD,CAAxC,wCAAOmB,QAAP,eAAiBC,WAAjB,eACA,eAA4CpB,QAAQ,CAAC,IAAD,CAApD,yCAAOqB,cAAP,eAAuBC,iBAAvB,eAEA,eAAgCtB,QAAQ,CAAC,EAAD,CAAxC,yCAAOuB,QAAP,eAAiBC,WAAjB,eACA,GAAMC,CAAAA,SAAS,CAAG1B,MAAM,EAAxB,CACA,gFACAD,SAAS,CAAC,UAAM,CACd,GAAIe,gBAAJ,CAAsB,CACpBO,WAAW,CAACP,gBAAD,CAAX,CACD,CACF,CAJQ,CAIN,CAACA,gBAAD,CAJM,CAAT,CAMA,gFAnBwB,CAqBxB,gFACAf,SAAS,CAAC,UAAM,CACd0B,WAAW,CAACP,IAAD,CAAX,CACD,CAFQ,CAEN,CAACA,IAAD,CAAOM,QAAP,CAFM,CAAT,CAGA,gFACAzB,SAAS,CAAC,UAAM,CACd2B,SAAS,CAACC,OAAV,CAAoBxB,cAAc,CAACS,iBAAD,CAAlC,CAEA,GAAIY,QAAQ,GAAKI,SAAjB,CAA4B,CAC1BF,SAAS,CAACC,OAAV,CAAkBE,IAAlB,CAAuB,SAAvB,CAAkCL,QAAlC,EACD,CAEDE,SAAS,CAACC,OAAV,CAAkBG,EAAlB,CAAqBnB,iBAArB,CAAwC,SAACoB,OAAD,CAAa,CACnD,GAAMC,CAAAA,eAAe,gCAChBD,OADgB,MAEnBE,OAAO,CAAEF,OAAO,CAACG,QAAR,GAAqBR,SAAS,CAACC,OAAV,CAAkBQ,EAF7B,EAArB,CAKA;AACAd,WAAW,CAAC,SAACD,QAAD,qCAAkBA,QAAlB,GAA4BY,eAA5B,IAAD,CAAX,CACD,CARD,EASA,MAAO,WAAM,CACXN,SAAS,CAACC,OAAV,CAAkBS,UAAlB,CAA6BZ,QAA7B,EACD,CAFD,CAGD,CAnBQ,CAmBN,CAACA,QAAD,CAnBM,CAAT,CAoBA,gFACA,GAAMa,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,WAAD,CAAiB,CACnCZ,SAAS,CAACC,OAAV,CAAkBE,IAAlB,CAAuBlB,iBAAvB,CAA0C,CACxC4B,IAAI,CAAED,WADkC,CAExCJ,QAAQ,CAAER,SAAS,CAACC,OAAV,CAAkBQ,EAFY,CAGxCjB,IAAI,CAAEA,IAHkC,CAA1C,EAMAD,UAAU,CAACC,IAAD,CAAOoB,WAAP,CAAV,CACD,CARD,CASA,gFACA,GAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,QAAD,CAAWC,QAAX,CAAwB,CAC/C,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,CAAUC,SAAV,CAAwB,CACzC,IAAK,GAAIC,CAAAA,CAAT,GAAcF,CAAAA,OAAd,CAAuB,CACrB,GAAMG,CAAAA,MAAM,CAAGH,OAAO,CAACE,CAAD,CAAtB,CAEAD,SAAS,CAACG,IAAV,CAAeD,MAAf,EACD,CACF,CAND,CAOAJ,UAAU,CAACJ,QAAD,CAAWE,KAAX,CAAV,CACAE,UAAU,CAACH,QAAD,CAAWE,KAAX,CAAV,CACAD,KAAK,CAACO,IAAN,OAAAP,KAAK,CAASC,KAAT,CAAL,CACA,GAAMO,CAAAA,iBAAiB,CAAGR,KAA1B,CAEA,GAAMS,CAAAA,MAAM,CAAGD,iBAAiB,CAACE,IAAlB,EAAf,CACA,GAAMnC,CAAAA,IAAI,CAAGkC,MAAM,CAACE,IAAP,CAAY,EAAZ,CAAb,CAEA,GAAMC,CAAAA,IAAI,CAAGnD,MAAM,CAACoD,MAAP,EAAb,CACAD,IAAI,CAACE,MAAL,CAAYvC,IAAZ,EACA,GAAMwC,CAAAA,UAAU,CAAGH,IAAI,CAACI,GAAL,EAAnB,CAEA,MAAOD,CAAAA,UAAP,CACD,CAvBD,CAwBA,gFAjFwB,CAmFxB,gFACA,MAAO,CACLtC,QAAQ,CAARA,QADK,CAELiB,WAAW,CAAXA,WAFK,CAGLG,gBAAgB,CAAhBA,gBAHK,CAILlB,cAAc,CAAdA,cAJK,CAKLC,iBAAiB,CAAjBA,iBALK,CAAP,CAOD,CA3FD,CA6FA,cAAeV,CAAAA,WAAf","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { sha256, sha224 } from \"js-sha256\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport useMessages from \"./useMessages\";\n\nconst NEW_MESSAGE_EVENT = \"newMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChatRoom = () => {\n  const previousMessages = useAppSelector(\n    (state) => state.previousMessages.value\n  );\n  const { addMessage } = useMessages();\n  const room = useAppSelector((state) => state.currentRoom.value);\n\n  const [messages, setMessages] = useState([]);\n  const [conversationId, setConversationId] = useState(null);\n\n  const [hashRoom, setHashRoom] = useState(\"\");\n  const socketRef = useRef();\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    if (previousMessages) {\n      setMessages(previousMessages);\n    }\n  }, [previousMessages]);\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    setHashRoom(room);\n  }, [room, hashRoom]);\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n\n    if (hashRoom !== undefined) {\n      socketRef.current.emit(\"setRoom\", hashRoom);\n    }\n\n    socketRef.current.on(NEW_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        isOwner: message.senderId === socketRef.current.id,\n      };\n\n      // send the new message to the others in the same room.\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect(hashRoom);\n    };\n  }, [hashRoom]);\n  /* -------------------------------------------------------------------------- */\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      room: room,\n    });\n\n    addMessage(room, messageBody);\n  };\n  /* -------------------------------------------------------------------------- */\n  const combineAddresses = (address1, address2) => {\n    const user1 = [];\n    const user2 = [];\n    const makeUnique = (address, userArray) => {\n      for (let i in address) {\n        const letter = address[i];\n\n        userArray.push(letter);\n      }\n    };\n    makeUnique(address1, user1);\n    makeUnique(address2, user2);\n    user1.push(...user2);\n    const combinedAddresses = user1;\n\n    const sorted = combinedAddresses.sort();\n    const room = sorted.join(\"\");\n\n    const hash = sha256.create();\n    hash.update(room);\n    const hashedRoom = hash.hex();\n\n    return hashedRoom;\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  return {\n    messages,\n    sendMessage,\n    combineAddresses,\n    conversationId,\n    setConversationId,\n  };\n};\n\nexport default useChatRoom;\n"]},"metadata":{},"sourceType":"module"}