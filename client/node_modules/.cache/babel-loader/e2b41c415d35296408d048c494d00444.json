{"ast":null,"code":"import _regeneratorRuntime from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useMutation,useQuery,useLazyQuery}from\"@apollo/client\";import addConversationMutation from\"../../GQL/mutations/addConversation\";import editMessageMutation from\"../../GQL/mutations/editMessage\";import getMessagesQuery from\"../../GQL/queries/getMessages\";import useChatRoom from\"./useChatRoom\";import{useAppSelector,useAppDispatch}from\"../../redux/hooks\";import{setPreviousMessages}from\"../../redux/features/previousMessagesSlice\";var useMessages=function useMessages(){var currentUser=useAppSelector(function(state){return state.currentUser;});var room=useAppSelector(function(state){return state.currentRoom.value;});// let {\n//   loading: loadingMessages,\n//   error: errorMessages,\n//   data: dataMessages,\n//   refetch: refetchMessages,\n// } = useQuery(getMessagesQuery);\n// useEffect(() => {\n//   console.log(errorMessages);\n// }, [errorMessages]);\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),messageList=_useState2[0],setMessageList=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),selectedFriend=_useState4[0],setSelectedFriend=_useState4[1];var _useMutation=useMutation(addConversationMutation),_useMutation2=_slicedToArray(_useMutation,1),addConversation=_useMutation2[0];var _useMutation3=useMutation(editMessageMutation),_useMutation4=_slicedToArray(_useMutation3,1),editMessage=_useMutation4[0];var dispatch=useAppDispatch();var _useLazyQuery=useLazyQuery(getMessagesQuery,{variables:{convoId:room}}),_useLazyQuery2=_slicedToArray(_useLazyQuery,2),getCurrentFriendMessages=_useLazyQuery2[0],_useLazyQuery2$=_useLazyQuery2[1],messagesLoading=_useLazyQuery2$.loading,messagesError=_useLazyQuery2$.error,messagesData=_useLazyQuery2$.data,networkStatus=_useLazyQuery2$.networkStatus,called=_useLazyQuery2$.called,messageRefetch=_useLazyQuery2$.refetch;/* -------------------------------------------------------------------------- */useEffect(function(){getCurrentFriendMessages();},[messageList]);/* -------------------------------------------------------------------------- */useEffect(function(){if(!messagesError&&messagesData){dispatch(setPreviousMessages([]));if(messagesData.messages[0]!==undefined){console.log(messagesData.messages);var alteredMessageList=[];messagesData.messages[0].messages.map(function(msg){var newMessage={body:\"\",isOwner:false};if(msg.senderId===currentUser.id){newMessage.isOwner=true;}newMessage.body=msg.body;alteredMessageList.push(newMessage);return null;});setMessageList(alteredMessageList);dispatch(setPreviousMessages(alteredMessageList));}}else{return null;}},[messagesData,messagesLoading,currentUser]);/* -------------------------------------------------------------------------- */var addMessage=function addMessage(convoId,body){editMessage({variables:{convoId:convoId,addMessage:{senderId:currentUser.id,body:body}}}).then(function(res){return messageRefetch();}).then(function(res){return setMessageList();}).catch(function(err){var _err$graphQLErrors;var errors=(_err$graphQLErrors=err.graphQLErrors)===null||_err$graphQLErrors===void 0?void 0:_err$graphQLErrors.map(function(error){return error.message;});console.log(errors);});};/* -------------------------------------------------------------------------- */var alteredChatData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var newMessageList;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(messageList.length>0)){_context.next=5;break;}newMessageList=[];messageList.map(function(msg){var newMessage={body:\"\",isOwner:false};if(msg.senderId===currentUser.id){newMessage.isOwner=true;}newMessage.body=msg.body;return newMessageList.push(newMessage);});console.log(newMessageList);return _context.abrupt(\"return\",newMessageList);case 5:case\"end\":return _context.stop();}}},_callee);}));return function alteredChatData(){return _ref.apply(this,arguments);};}();/* -------------------------------------------------------------------------- */ /* -------------------------------------------------------------------------- */ /* -------------------------------------------------------------------------- */return{messageList:messageList,addMessage:addMessage,currentUser:currentUser,getCurrentFriendMessages:getCurrentFriendMessages,selectedFriend:selectedFriend,setSelectedFriend:setSelectedFriend,setMessageList:setMessageList};//   }\n};export default useMessages;","map":{"version":3,"sources":["/Users/omarragab/Documents/test/launchFeb/client/src/components/CHAT/useMessages.js"],"names":["React","useState","useEffect","useMutation","useQuery","useLazyQuery","addConversationMutation","editMessageMutation","getMessagesQuery","useChatRoom","useAppSelector","useAppDispatch","setPreviousMessages","useMessages","currentUser","state","room","currentRoom","value","messageList","setMessageList","selectedFriend","setSelectedFriend","addConversation","editMessage","dispatch","variables","convoId","getCurrentFriendMessages","messagesLoading","loading","messagesError","error","messagesData","data","networkStatus","called","messageRefetch","refetch","messages","undefined","console","log","alteredMessageList","map","msg","newMessage","body","isOwner","senderId","id","push","addMessage","then","res","catch","err","errors","graphQLErrors","message","alteredChatData","length","newMessageList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\n\nimport addConversationMutation from \"../../GQL/mutations/addConversation\";\nimport editMessageMutation from \"../../GQL/mutations/editMessage\";\nimport getMessagesQuery from \"../../GQL/queries/getMessages\";\nimport useChatRoom from \"./useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport { setPreviousMessages } from \"../../redux/features/previousMessagesSlice\";\n\nconst useMessages = () => {\n  const currentUser = useAppSelector((state) => state.currentUser);\n  const room = useAppSelector((state) => state.currentRoom.value);\n  // let {\n  //   loading: loadingMessages,\n  //   error: errorMessages,\n  //   data: dataMessages,\n  //   refetch: refetchMessages,\n  // } = useQuery(getMessagesQuery);\n  // useEffect(() => {\n  //   console.log(errorMessages);\n  // }, [errorMessages]);\n\n  const [messageList, setMessageList] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n\n  const [addConversation] = useMutation(addConversationMutation);\n  const [editMessage] = useMutation(editMessageMutation);\n  const dispatch = useAppDispatch();\n\n  let [\n    getCurrentFriendMessages,\n    {\n      loading: messagesLoading,\n      error: messagesError,\n      data: messagesData,\n      networkStatus,\n      called,\n      refetch: messageRefetch,\n    },\n  ] = useLazyQuery(getMessagesQuery, {\n    variables: { convoId: room },\n  });\n\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    getCurrentFriendMessages();\n  }, [messageList]);\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (!messagesError && messagesData) {\n      dispatch(setPreviousMessages([]));\n      if (messagesData.messages[0] !== undefined) {\n        console.log(messagesData.messages);\n        const alteredMessageList = [];\n\n        messagesData.messages[0].messages.map((msg) => {\n          const newMessage = { body: \"\", isOwner: false };\n          if (msg.senderId === currentUser.id) {\n            newMessage.isOwner = true;\n          }\n          newMessage.body = msg.body;\n\n          alteredMessageList.push(newMessage);\n          return null;\n        });\n\n        setMessageList(alteredMessageList);\n\n        dispatch(setPreviousMessages(alteredMessageList));\n      }\n    } else {\n      return null;\n    }\n  }, [messagesData, messagesLoading, currentUser]);\n\n  /* -------------------------------------------------------------------------- */\n  const addMessage = (convoId, body) => {\n    editMessage({\n      variables: {\n        convoId: convoId,\n        addMessage: { senderId: currentUser.id, body: body },\n      },\n    })\n      .then((res) => messageRefetch())\n      .then((res) => setMessageList())\n      .catch((err) => {\n        const errors = err.graphQLErrors?.map((error) => error.message);\n        console.log(errors);\n      });\n  };\n  /* -------------------------------------------------------------------------- */\n  const alteredChatData = async () => {\n    if (messageList.length > 0) {\n      const newMessageList = [];\n      messageList.map((msg) => {\n        const newMessage = { body: \"\", isOwner: false };\n        if (msg.senderId === currentUser.id) {\n          newMessage.isOwner = true;\n        }\n        newMessage.body = msg.body;\n\n        return newMessageList.push(newMessage);\n      });\n      console.log(newMessageList);\n      return newMessageList;\n    }\n  };\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  return {\n    messageList,\n    addMessage,\n    currentUser,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend,\n    setMessageList,\n  };\n  //   }\n};\n\nexport default useMessages;\n"]},"metadata":{},"sourceType":"module"}