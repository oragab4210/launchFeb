{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import styles from \"./Info.module.css\";\n\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../GQL/mutations/EditUser\"; // import { useAppSelector, useAppDispatch } from \"../../\";\n\nimport query from \"../../GQL/queries/CurrentUser\";\nimport axios from \"axios\";\nimport addConversationMutation from \"../../GQL/mutations/addConversation\";\nimport editMessageMutation from \"../../GQL/mutations/editMessage\";\nimport getMessagesQuery from \"../../GQL/queries/getMessages\";\nimport useChatRoom from \"./useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport { setPreviousMessages } from \"../../redux/features/previousMessagesSlice\"; // editUser({\n//   variables: variables(),\n//   refetchQueries: [{ query: query }],\n//   awaitRefetchQueries: true,\n// })\n//   .then((res) => [console.log(\"INFO\", data), setEditActive(null)])\n//   .then((res) => [setAgeText(\"\"), setEmailText(\"\"), setNameText(\"\")])\n//   .catch((err) => {\n//     const errors = err.graphQLErrors?.map((error) => error.message);\n//     console.log(errors);\n//   });\n// const selectFriend = () => {\n//   //   const { combineAddresses } = useChatRoom();\n//   return \"1234\";\n// };\n\nconst useMessages = () => {\n  _s();\n\n  let {\n    loading,\n    error,\n    data\n  } = useQuery(query);\n  const [user, setUser] = useState(null);\n  const [messageList, setMessageList] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n  const [addConversation] = useMutation(addConversationMutation);\n  const [editMessage] = useMutation(editMessageMutation);\n  const dispatch = useAppDispatch(); //   let {\n  //     loading: messagesLoading,\n  //     error: messagesError,\n  //     data: messagesData,\n  //   } = useQuery(getMessagesQuery, {\n  //     variables: { convoId: \"1234\" },\n  //   });\n\n  let [getCurrentFriendMessages, {\n    loading: messagesLoading,\n    error: messagesError,\n    data: messagesData\n  }] = useLazyQuery(getMessagesQuery);\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (data) {\n      const user = data.user2;\n      setUser(user); //   console.log(user);\n    }\n\n    if (!messagesError && messagesData) {\n      dispatch(setPreviousMessages([]));\n\n      if (messagesData.messages[0] !== undefined) {\n        console.log(messagesData.messages);\n        const alteredMessageList = [];\n        const hi = [{\n          senderId: \"123\",\n          body: \"hi\"\n        }];\n        messagesData.messages[0].messages.map(msg => {\n          const newMessage = {\n            body: \"\",\n            isOwner: false\n          };\n\n          if (msg.senderId === user.id) {\n            newMessage.isOwner = true;\n          }\n\n          newMessage.body = msg.body; // console.log(msg);\n          // console.log(msg.body);\n          // console.log(msg.senderId);\n\n          alteredMessageList.push(newMessage);\n          return null;\n        });\n        setMessageList(alteredMessageList); //   console.log(\"message\", alteredMessageList);\n\n        dispatch(setPreviousMessages(alteredMessageList));\n      }\n    } else {\n      //   setMessageList([]);\n      //   console.log(\"message\", alteredMessageList);\n      //   dispatch(setPreviousMessages([]));\n      return null;\n    }\n  }, [data, messagesData, messagesLoading, user]);\n  /* -------------------------------------------------------------------------- */\n\n  const addMessage = (convoId, body) => {\n    editMessage({\n      variables: {\n        convoId: convoId,\n        addMessage: {\n          senderId: user.id,\n          body: body\n        }\n      },\n      refetchQueries: [{\n        getMessagesQuery: getMessagesQuery\n      }],\n      awaitRefetchQueries: true\n    }) //   .then((res) => console.log(res.data.editMessage.messages))\n    .catch(err => {\n      var _err$graphQLErrors;\n\n      const errors = (_err$graphQLErrors = err.graphQLErrors) === null || _err$graphQLErrors === void 0 ? void 0 : _err$graphQLErrors.map(error => error.message);\n      console.log(errors);\n    });\n  };\n  /* -------------------------------------------------------------------------- */\n\n\n  const alteredChatData = async () => {\n    if (messageList.length > 0) {\n      const newMessageList = [];\n      messageList.map(msg => {\n        const newMessage = {\n          body: \"\",\n          isOwner: false\n        };\n\n        if (msg.senderId === user.id) {\n          newMessage.isOwner = true;\n        }\n\n        newMessage.body = msg.body; // console.log(msg.body);\n        // console.log(msg.senderId);\n\n        return newMessageList.push(newMessage);\n      });\n      console.log(newMessageList);\n      return newMessageList;\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  //   if (messageList) {\n\n\n  return {\n    messageList,\n    addMessage,\n    user,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend,\n    setMessageList\n  }; //   }\n};\n\n_s(useMessages, \"mk77K61jKslOqOhjIsW0CSJ9Khw=\", false, function () {\n  return [useQuery, useMutation, useMutation, useAppDispatch, useLazyQuery];\n});\n\nexport default useMessages;","map":{"version":3,"sources":["/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/CHAT/useMessages.js"],"names":["React","useState","useEffect","useMutation","useQuery","useLazyQuery","mutation","query","axios","addConversationMutation","editMessageMutation","getMessagesQuery","useChatRoom","useAppSelector","useAppDispatch","setPreviousMessages","useMessages","loading","error","data","user","setUser","messageList","setMessageList","selectedFriend","setSelectedFriend","addConversation","editMessage","dispatch","getCurrentFriendMessages","messagesLoading","messagesError","messagesData","user2","messages","undefined","console","log","alteredMessageList","hi","senderId","body","map","msg","newMessage","isOwner","id","push","addMessage","convoId","variables","refetchQueries","awaitRefetchQueries","catch","err","errors","graphQLErrors","message","alteredChatData","length","newMessageList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import styles from \"./Info.module.css\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport mutation from \"../../GQL/mutations/EditUser\";\n// import { useAppSelector, useAppDispatch } from \"../../\";\nimport query from \"../../GQL/queries/CurrentUser\";\nimport axios from \"axios\";\nimport addConversationMutation from \"../../GQL/mutations/addConversation\";\nimport editMessageMutation from \"../../GQL/mutations/editMessage\";\nimport getMessagesQuery from \"../../GQL/queries/getMessages\";\nimport useChatRoom from \"./useChatRoom\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\nimport { setPreviousMessages } from \"../../redux/features/previousMessagesSlice\";\n\n// editUser({\n//   variables: variables(),\n//   refetchQueries: [{ query: query }],\n//   awaitRefetchQueries: true,\n// })\n//   .then((res) => [console.log(\"INFO\", data), setEditActive(null)])\n//   .then((res) => [setAgeText(\"\"), setEmailText(\"\"), setNameText(\"\")])\n//   .catch((err) => {\n//     const errors = err.graphQLErrors?.map((error) => error.message);\n\n//     console.log(errors);\n//   });\n// const selectFriend = () => {\n//   //   const { combineAddresses } = useChatRoom();\n//   return \"1234\";\n// };\n\nconst useMessages = () => {\n  let { loading, error, data } = useQuery(query);\n  const [user, setUser] = useState(null);\n  const [messageList, setMessageList] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n\n  const [addConversation] = useMutation(addConversationMutation);\n  const [editMessage] = useMutation(editMessageMutation);\n  const dispatch = useAppDispatch();\n  //   let {\n  //     loading: messagesLoading,\n  //     error: messagesError,\n  //     data: messagesData,\n  //   } = useQuery(getMessagesQuery, {\n  //     variables: { convoId: \"1234\" },\n  //   });\n\n  let [\n    getCurrentFriendMessages,\n    { loading: messagesLoading, error: messagesError, data: messagesData },\n  ] = useLazyQuery(getMessagesQuery);\n\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {\n    if (data) {\n      const user = data.user2;\n      setUser(user);\n      //   console.log(user);\n    }\n    if (!messagesError && messagesData) {\n      dispatch(setPreviousMessages([]));\n      if (messagesData.messages[0] !== undefined) {\n        console.log(messagesData.messages);\n        const alteredMessageList = [];\n        const hi = [{ senderId: \"123\", body: \"hi\" }];\n        messagesData.messages[0].messages.map((msg) => {\n          const newMessage = { body: \"\", isOwner: false };\n          if (msg.senderId === user.id) {\n            newMessage.isOwner = true;\n          }\n          newMessage.body = msg.body;\n          // console.log(msg);\n          // console.log(msg.body);\n          // console.log(msg.senderId);\n          alteredMessageList.push(newMessage);\n          return null;\n        });\n\n        setMessageList(alteredMessageList);\n        //   console.log(\"message\", alteredMessageList);\n        dispatch(setPreviousMessages(alteredMessageList));\n      }\n    } else {\n      //   setMessageList([]);\n      //   console.log(\"message\", alteredMessageList);\n      //   dispatch(setPreviousMessages([]));\n      return null;\n    }\n  }, [data, messagesData, messagesLoading, user]);\n\n  /* -------------------------------------------------------------------------- */\n  const addMessage = (convoId, body) => {\n    editMessage({\n      variables: {\n        convoId: convoId,\n        addMessage: { senderId: user.id, body: body },\n      },\n      refetchQueries: [{ getMessagesQuery: getMessagesQuery }],\n      awaitRefetchQueries: true,\n    })\n      //   .then((res) => console.log(res.data.editMessage.messages))\n      .catch((err) => {\n        const errors = err.graphQLErrors?.map((error) => error.message);\n        console.log(errors);\n      });\n  };\n  /* -------------------------------------------------------------------------- */\n  const alteredChatData = async () => {\n    if (messageList.length > 0) {\n      const newMessageList = [];\n      messageList.map((msg) => {\n        const newMessage = { body: \"\", isOwner: false };\n        if (msg.senderId === user.id) {\n          newMessage.isOwner = true;\n        }\n        newMessage.body = msg.body;\n        // console.log(msg.body);\n        // console.log(msg.senderId);\n\n        return newMessageList.push(newMessage);\n      });\n      console.log(newMessageList);\n      return newMessageList;\n    }\n  };\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  //   if (messageList) {\n  return {\n    messageList,\n    addMessage,\n    user,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend,\n    setMessageList,\n  };\n  //   }\n};\n\nexport default useMessages;\n"]},"metadata":{},"sourceType":"module"}