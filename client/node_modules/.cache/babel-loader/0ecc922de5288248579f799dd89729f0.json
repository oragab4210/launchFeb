{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Home/EverythingPosts/PostList/PostList.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport mutation from \"../../../../GQL/mutations/EditUser\";\nimport getCurrentUser from \"../../../../GQL/queries/CurrentUser\";\nimport Post from \"../Post/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  const currentUser = useAppSelector(state => state.currentUser.value);\n  const [editUser] = useMutation(mutation);\n  const [user, setUser] = useState(null);\n  const [text, setText] = useState(\"\");\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState([]);\n  const [posts, setPosts] = useState(\"\");\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends); // console.log(\"current User\", currentUser.friends);\n    }\n  }, [currentUser]);\n  /* ------------------------- creating list of posts ------------------------- */\n\n  useEffect(() => {\n    if (friendList) {\n      // console.log(friendList);\n      // const completeListOfMyPostsAndFriendPosts = currentUser.posts;\n      const newList = friendList.map((friend, index) => {\n        return friend.posts;\n      }); // console.log(newList.flat());\n\n      const finishedFriendList = newList.flat(); // console.log(finishedFriendList);\n\n      const completeListOfMyPostsAndFriendPosts = currentUser.posts.concat(finishedFriendList);\n      console.log(finishedFriendList); // console.log(completeListOfMyPostsAndFriendPosts);\n\n      setPostList(completeListOfMyPostsAndFriendPosts);\n    }\n  }, [friendList, currentUser]);\n  /* -------------------------- sorting list of posts ------------------------- */\n\n  useEffect(() => {\n    if (postList.length > 0) {\n      setPostListDone(postList.sort((a, b) => a.time > b.time ? -1 : 1));\n    }\n  }, [postList]); // const renderPosts = () => {\n  //   return posts.map((post, index) => {\n  //     return (\n  //       <div key={index} className={styles.individualPost}>\n  //         <h3>{user.email}</h3> edit post/delete post here <button>Edit</button>{\" \"}\n  //         time/date here\n  //         <h2>{post.post}</h2>\n  //         <button>Like</button>\n  //         <hr />\n  //         comments//// <button>Comment</button>\n  //         <br />\n  //         post.comments here\n  //       </div>\n  //     );\n  //   });\n  // };\n\n  const renderPosts = () => {\n    return postListDone.map((post, index) => {\n      const d = new Date(parseInt(post.time));\n      const date = d.toString();\n      console.log(post, \"post test\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          name: post.userId.name,\n          date: date,\n          postId: post.id,\n          postContent: post.post,\n          likeCount: post.likedBy.length,\n          likeList: post.likedBy,\n          commentCount: post.comments.length,\n          commentList: post.comments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.postListContainer,\n    children: renderPosts()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PostList, \"2VG2caoR9N20lUJOxwLvBpktxb8=\", false, function () {\n  return [useAppSelector, useMutation];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Job/ResumeProject1/client/src/components/Home/EverythingPosts/PostList/PostList.js"],"names":["styles","useAppSelector","useAppDispatch","React","useState","useEffect","useMutation","useQuery","mutation","getCurrentUser","Post","PostList","currentUser","state","value","editUser","user","setUser","text","setText","friendList","setFriendList","postList","setPostList","postListDone","setPostListDone","posts","setPosts","friends","newList","map","friend","index","finishedFriendList","flat","completeListOfMyPostsAndFriendPosts","concat","console","log","length","sort","a","b","time","renderPosts","post","d","Date","parseInt","date","toString","userId","name","id","likedBy","comments","postListContainer"],"mappings":"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","sourcesContent":["import styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport mutation from \"../../../../GQL/mutations/EditUser\";\nimport getCurrentUser from \"../../../../GQL/queries/CurrentUser\";\nimport Post from \"../Post/Post\";\n\nconst PostList = () => {\n  const currentUser = useAppSelector((state) => state.currentUser.value);\n  const [editUser] = useMutation(mutation);\n  const [user, setUser] = useState(null);\n  const [text, setText] = useState(\"\");\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState([]);\n  const [posts, setPosts] = useState(\"\");\n\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends);\n      // console.log(\"current User\", currentUser.friends);\n    }\n  }, [currentUser]);\n\n  /* ------------------------- creating list of posts ------------------------- */\n  useEffect(() => {\n    if (friendList) {\n      // console.log(friendList);\n      // const completeListOfMyPostsAndFriendPosts = currentUser.posts;\n      const newList = friendList.map((friend, index) => {\n        return friend.posts;\n      });\n      // console.log(newList.flat());\n      const finishedFriendList = newList.flat();\n      // console.log(finishedFriendList);\n      const completeListOfMyPostsAndFriendPosts =\n        currentUser.posts.concat(finishedFriendList);\n      console.log(finishedFriendList);\n      // console.log(completeListOfMyPostsAndFriendPosts);\n      setPostList(completeListOfMyPostsAndFriendPosts);\n    }\n  }, [friendList, currentUser]);\n\n  /* -------------------------- sorting list of posts ------------------------- */\n  useEffect(() => {\n    if (postList.length > 0) {\n      setPostListDone(postList.sort((a, b) => (a.time > b.time ? -1 : 1)));\n    }\n  }, [postList]);\n\n  // const renderPosts = () => {\n  //   return posts.map((post, index) => {\n  //     return (\n  //       <div key={index} className={styles.individualPost}>\n  //         <h3>{user.email}</h3> edit post/delete post here <button>Edit</button>{\" \"}\n  //         time/date here\n  //         <h2>{post.post}</h2>\n  //         <button>Like</button>\n  //         <hr />\n  //         comments//// <button>Comment</button>\n  //         <br />\n  //         post.comments here\n  //       </div>\n  //     );\n  //   });\n  // };\n  const renderPosts = () => {\n    return postListDone.map((post, index) => {\n      const d = new Date(parseInt(post.time));\n      const date = d.toString();\n      console.log(post, \"post test\");\n\n      return (\n        <div key={index}>\n          <Post\n            name={post.userId.name}\n            date={date}\n            postId={post.id}\n            postContent={post.post}\n            likeCount={post.likedBy.length}\n            likeList={post.likedBy}\n            commentCount={post.comments.length}\n            commentList={post.comments}\n          />\n        </div>\n      );\n    });\n  };\n\n  return <div className={styles.postListContainer}>{renderPosts()}</div>;\n};\n\nexport default PostList;\n"]},"metadata":{},"sourceType":"module"}