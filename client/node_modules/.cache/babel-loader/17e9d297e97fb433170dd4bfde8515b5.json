{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/EverythingPosts/PostList/PostList.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport mutation from \"../../../GQL/mutations/EditUser\";\nimport getCurrentUser from \"../../../GQL/queries/CurrentUser\";\nimport Post from \"../Post/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  // let { loading, error, data } = useQuery(getCurrentUser);\n  const currentUser = useAppSelector(state => state.currentUser.value);\n  const [editUser] = useMutation(mutation);\n  const [user, setUser] = useState(null);\n  const [text, setText] = useState(\"\");\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState(false);\n  const [posts, setPosts] = useState(\"\");\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends); // console.log(\"current User\", currentUser.friends);\n    }\n  }, [currentUser]);\n  /* ------------------------- creating list of posts ------------------------- */\n\n  useEffect(() => {\n    if (friendList) {\n      const hi = async () => {\n        // await friendList.map((friend, index) => {\n        //   setPostList(postList.concat(friend.posts));\n        //   return null;\n        // });\n        const newList = [];\n        console.log(currentUser.posts);\n        await currentUser.posts.map((post, index) => {\n          // const nameIncludedList = { name: currentUser.name, ...post };\n          // console.log(nameIncludedList);\n          // newList.concat(nameIncludedList);\n          return null;\n        });\n        console.log(newList); // setFriendList(postList.concat(newList));\n        // console.log;\n        // console.log(friendList, \"done1\");\n        // setPostListDone(true);\n      };\n\n      hi(); // console.log(currentUser.posts, \"user posts\");\n      // currentUser.posts.map((post, index) => {\n      //   const nameIncludedList = { name: currentUser.name, ...post };\n      //   setPostList(postList.concat(nameIncludedList));\n      //   return null;\n      // });\n    }\n  }, [friendList]);\n  /* -------------------------- sorting list of posts ------------------------- */\n\n  useEffect(() => {\n    if (postList) {\n      // console.log(postList, \"final post list\");\n      postList.sort((a, b) => a.time > b.time ? -1 : 1); // console.log(\"2\", postList);\n    }\n  }, [postList]); // const renderPosts = () => {\n  //   return posts.map((post, index) => {\n  //     return (\n  //       <div key={index} className={styles.individualPost}>\n  //         <h3>{user.email}</h3> edit post/delete post here <button>Edit</button>{\" \"}\n  //         time/date here\n  //         <h2>{post.post}</h2>\n  //         <button>Like</button>\n  //         <hr />\n  //         comments//// <button>Comment</button>\n  //         <br />\n  //         post.comments here\n  //       </div>\n  //     );\n  //   });\n  // };\n\n  const renderPosts = () => {\n    // console.log(postList, \"done\");\n    return postList.map((post, index) => {\n      const d = new Date(parseInt(post.time));\n      const date = d.toString(); // console.log(typeof date.toString());\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          name: post.userId.name,\n          date: date,\n          postId: post.id,\n          postContent: post.post,\n          likeCount: post.likedBy.length,\n          commentCount: post.comments.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postListContainer,\n      children: renderPosts()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostList, \"2IiMrdTIUF1oMaNCbEQVRVjq/0s=\", false, function () {\n  return [useAppSelector, useMutation];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/EverythingPosts/PostList/PostList.js"],"names":["styles","useAppSelector","useAppDispatch","React","useState","useEffect","useMutation","useQuery","mutation","getCurrentUser","Post","PostList","currentUser","state","value","editUser","user","setUser","text","setText","friendList","setFriendList","postList","setPostList","postListDone","setPostListDone","posts","setPosts","friends","hi","newList","console","log","map","post","index","sort","a","b","time","renderPosts","d","Date","parseInt","date","toString","userId","name","id","likedBy","length","comments","container","postListContainer"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,sBAA/C;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,IAAP,MAAiB,cAAjB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA,QAAMC,WAAW,GAAGX,cAAc,CAAEY,KAAD,IAAWA,KAAK,CAACD,WAAN,CAAkBE,KAA9B,CAAlC;AACA,QAAM,CAACC,QAAD,IAAaT,WAAW,CAACE,QAAD,CAA9B;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM,CAACsB,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,WAAW,CAACgB,OAAhB,EAAyB;AACvBP,MAAAA,aAAa,CAACT,WAAW,CAACgB,OAAb,CAAb,CADuB,CAEvB;AACD;AACF,GALQ,EAKN,CAAChB,WAAD,CALM,CAAT;AAOA;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,UAAJ,EAAgB;AACd,YAAMS,EAAE,GAAG,YAAY;AACrB;AACA;AACA;AACA;AACA,cAAMC,OAAO,GAAG,EAAhB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYpB,WAAW,CAACc,KAAxB;AACA,cAAMd,WAAW,CAACc,KAAZ,CAAkBO,GAAlB,CAAsB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C;AACA;AACA;AACA,iBAAO,IAAP;AACD,SALK,CAAN;AAMAJ,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAbqB,CAerB;AACA;AACA;AACA;AACD,OAnBD;;AAoBAD,MAAAA,EAAE,GArBY,CAuBd;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GA/BQ,EA+BN,CAACT,UAAD,CA/BM,CAAT;AAiCA;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,QAAJ,EAAc;AACZ;AACAA,MAAAA,QAAQ,CAACc,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAhD,EAFY,CAGZ;AACD;AACF,GANQ,EAMN,CAACjB,QAAD,CANM,CAAT,CAtDqB,CA8DrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMkB,WAAW,GAAG,MAAM;AACxB;AACA,WAAOlB,QAAQ,CAACW,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnC,YAAMM,CAAC,GAAG,IAAIC,IAAJ,CAASC,QAAQ,CAACT,IAAI,CAACK,IAAN,CAAjB,CAAV;AACA,YAAMK,IAAI,GAAGH,CAAC,CAACI,QAAF,EAAb,CAFmC,CAGnC;;AAEA,0BACE;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,IAAI,EAAEX,IAAI,CAACY,MAAL,CAAYC,IADpB;AAEE,UAAA,IAAI,EAAEH,IAFR;AAGE,UAAA,MAAM,EAAEV,IAAI,CAACc,EAHf;AAIE,UAAA,WAAW,EAAEd,IAAI,CAACA,IAJpB;AAKE,UAAA,SAAS,EAAEA,IAAI,CAACe,OAAL,CAAaC,MAL1B;AAME,UAAA,YAAY,EAAEhB,IAAI,CAACiB,QAAL,CAAcD;AAN9B;AAAA;AAAA;AAAA;AAAA;AADF,SAAUf,KAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,KAjBM,CAAP;AAkBD,GApBD;;AAsBA,sBACE;AAAK,IAAA,SAAS,EAAEnC,MAAM,CAACoD,SAAvB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEpD,MAAM,CAACqD,iBAAvB;AAAA,gBAA2Cb,WAAW;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzGD;;GAAM7B,Q;UAEgBV,c,EACDK,W;;;KAHfK,Q;AA2GN,eAAeA,QAAf","sourcesContent":["import styles from \"./PostList.module.css\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport mutation from \"../../../GQL/mutations/EditUser\";\nimport getCurrentUser from \"../../../GQL/queries/CurrentUser\";\nimport Post from \"../Post/Post\";\n\nconst PostList = () => {\n  // let { loading, error, data } = useQuery(getCurrentUser);\n  const currentUser = useAppSelector((state) => state.currentUser.value);\n  const [editUser] = useMutation(mutation);\n  const [user, setUser] = useState(null);\n  const [text, setText] = useState(\"\");\n  const [friendList, setFriendList] = useState(\"\");\n  const [postList, setPostList] = useState([]);\n  const [postListDone, setPostListDone] = useState(false);\n\n  const [posts, setPosts] = useState(\"\");\n\n  useEffect(() => {\n    if (currentUser.friends) {\n      setFriendList(currentUser.friends);\n      // console.log(\"current User\", currentUser.friends);\n    }\n  }, [currentUser]);\n\n  /* ------------------------- creating list of posts ------------------------- */\n  useEffect(() => {\n    if (friendList) {\n      const hi = async () => {\n        // await friendList.map((friend, index) => {\n        //   setPostList(postList.concat(friend.posts));\n        //   return null;\n        // });\n        const newList = [];\n        console.log(currentUser.posts);\n        await currentUser.posts.map((post, index) => {\n          // const nameIncludedList = { name: currentUser.name, ...post };\n          // console.log(nameIncludedList);\n          // newList.concat(nameIncludedList);\n          return null;\n        });\n        console.log(newList);\n\n        // setFriendList(postList.concat(newList));\n        // console.log;\n        // console.log(friendList, \"done1\");\n        // setPostListDone(true);\n      };\n      hi();\n\n      // console.log(currentUser.posts, \"user posts\");\n      // currentUser.posts.map((post, index) => {\n      //   const nameIncludedList = { name: currentUser.name, ...post };\n      //   setPostList(postList.concat(nameIncludedList));\n      //   return null;\n      // });\n    }\n  }, [friendList]);\n\n  /* -------------------------- sorting list of posts ------------------------- */\n  useEffect(() => {\n    if (postList) {\n      // console.log(postList, \"final post list\");\n      postList.sort((a, b) => (a.time > b.time ? -1 : 1));\n      // console.log(\"2\", postList);\n    }\n  }, [postList]);\n\n  // const renderPosts = () => {\n  //   return posts.map((post, index) => {\n  //     return (\n  //       <div key={index} className={styles.individualPost}>\n  //         <h3>{user.email}</h3> edit post/delete post here <button>Edit</button>{\" \"}\n  //         time/date here\n  //         <h2>{post.post}</h2>\n  //         <button>Like</button>\n  //         <hr />\n  //         comments//// <button>Comment</button>\n  //         <br />\n  //         post.comments here\n  //       </div>\n  //     );\n  //   });\n  // };\n  const renderPosts = () => {\n    // console.log(postList, \"done\");\n    return postList.map((post, index) => {\n      const d = new Date(parseInt(post.time));\n      const date = d.toString();\n      // console.log(typeof date.toString());\n\n      return (\n        <div key={index}>\n          <Post\n            name={post.userId.name}\n            date={date}\n            postId={post.id}\n            postContent={post.post}\n            likeCount={post.likedBy.length}\n            commentCount={post.comments.length}\n          />\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.postListContainer}>{renderPosts()}</div>\n    </div>\n  );\n};\n\nexport default PostList;\n"]},"metadata":{},"sourceType":"module"}