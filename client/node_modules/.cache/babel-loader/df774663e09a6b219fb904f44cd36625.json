{"ast":null,"code":"var _jsxFileName = \"/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/CHAT/RoomsList/RoomsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./RoomList.module.css\";\nimport useChatRoom from \"../useChatRoom\"; // import useEchat from \"../useEChat/useEchat\";\n// import web3 from \"../../../ethereum/Work/web3\";\n\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { setRoom } from \"../../../redux/features/roomSlice\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport useMessages from \"../useMessages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RoomsList = () => {\n  _s();\n\n  // const [selectedRoom, setSelectedRoom] = useState(null);\n  let {\n    loading,\n    error,\n    data\n  } = useQuery(query);\n  const [activeConversations, setActiveConversations] = useState([]);\n  const {\n    messageList,\n    addMessage,\n    user,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend\n  } = useMessages();\n  /* -------------------------------------------------------------------------- */\n\n  const room = useAppSelector(state => state.currentRoom.value);\n  const userAccounts = useAppSelector(state => state.userAddresses.value);\n  const dispatch = useAppDispatch();\n  const {\n    messages,\n    sendMessage,\n    room2,\n    setRoom2,\n    combineAddresses,\n    conversationId,\n    setConversationId\n  } = useChatRoom(room);\n  const [currentRoom, setCurrentRoom] = useState(room);\n  /* -------------------------------------------------------------------------- */\n\n  useEffect(() => {// if (data) {\n    //   const user = data.user2;\n    //   console.log(user);\n    //   // console.log(\"YYYY\", data.user2.friends);\n    //   setActiveConversations(user.conversations);\n    // }\n    // if (selectedFriend) {\n    //   getCurrentFriendMessages();\n    // }\n  }, [data]);\n  /* -------------------------------------------------------------------------- */\n\n  const doStuffOnRoomClick = (personId, index) => {\n    const hash = combineAddresses(user.id, personId);\n    return [dispatch(setRoom(hash)), console.log(hash), setSelectedFriend(index), setConversationId(hash), getCurrentFriendMessages({\n      variables: {\n        convoId: hash\n      }\n    })];\n  }; //hmmm\n\n\n  const renderRooms = () => {\n    return activeConversations.map((person, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: selectedFriend === index ? styles.selectedRoom : styles.room,\n        onClick: () => doStuffOnRoomClick(person.id, index),\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: person.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.title,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: \"0px\",\n          marginTop: \"0px\"\n        },\n        children: \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.roomList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RoomsList, \"7N5MtUob1bTMfbHeIlzRjhbc334=\", false, function () {\n  return [useQuery, useMessages, useAppSelector, useAppSelector, useAppDispatch, useChatRoom];\n});\n\n_c = RoomsList;\nexport default RoomsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomsList\");","map":{"version":3,"sources":["/Users/omarragab/Documents/Programming/ResumeProject1/client/src/components/CHAT/RoomsList/RoomsList.js"],"names":["React","useState","useEffect","styles","useChatRoom","useAppSelector","useAppDispatch","setRoom","query","useMutation","useQuery","useLazyQuery","useMessages","RoomsList","loading","error","data","activeConversations","setActiveConversations","messageList","addMessage","user","getCurrentFriendMessages","selectedFriend","setSelectedFriend","room","state","currentRoom","value","userAccounts","userAddresses","dispatch","messages","sendMessage","room2","setRoom2","combineAddresses","conversationId","setConversationId","setCurrentRoom","doStuffOnRoomClick","personId","index","hash","id","console","log","variables","convoId","renderRooms","map","person","selectedRoom","email","container","title","marginBottom","marginTop","roomList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./RoomList.module.css\";\nimport useChatRoom from \"../useChatRoom\";\n// import useEchat from \"../useEChat/useEchat\";\n// import web3 from \"../../../ethereum/Work/web3\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\nimport { setRoom } from \"../../../redux/features/roomSlice\";\nimport query from \"../../../GQL/queries/CurrentUser\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport useMessages from \"../useMessages\";\n\nconst RoomsList = () => {\n  // const [selectedRoom, setSelectedRoom] = useState(null);\n  let { loading, error, data } = useQuery(query);\n  const [activeConversations, setActiveConversations] = useState([]);\n  const {\n    messageList,\n    addMessage,\n    user,\n    getCurrentFriendMessages,\n    selectedFriend,\n    setSelectedFriend,\n  } = useMessages();\n\n  /* -------------------------------------------------------------------------- */\n  const room = useAppSelector((state) => state.currentRoom.value);\n  const userAccounts = useAppSelector((state) => state.userAddresses.value);\n  const dispatch = useAppDispatch();\n  const {\n    messages,\n    sendMessage,\n    room2,\n    setRoom2,\n    combineAddresses,\n    conversationId,\n    setConversationId,\n  } = useChatRoom(room);\n  const [currentRoom, setCurrentRoom] = useState(room);\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    // if (data) {\n    //   const user = data.user2;\n    //   console.log(user);\n    //   // console.log(\"YYYY\", data.user2.friends);\n    //   setActiveConversations(user.conversations);\n    // }\n    // if (selectedFriend) {\n    //   getCurrentFriendMessages();\n    // }\n  }, [data]);\n\n  /* -------------------------------------------------------------------------- */\n  const doStuffOnRoomClick = (personId, index) => {\n    const hash = combineAddresses(user.id, personId);\n    return [\n      dispatch(setRoom(hash)),\n      console.log(hash),\n      setSelectedFriend(index),\n      setConversationId(hash),\n      getCurrentFriendMessages({\n        variables: {\n          convoId: hash,\n        },\n      }),\n    ];\n  };\n  //hmmm\n  const renderRooms = () => {\n    return activeConversations.map((person, index) => {\n      return (\n        <div\n          className={\n            selectedFriend === index ? styles.selectedRoom : styles.room\n          }\n          onClick={() => doStuffOnRoomClick(person.id, index)}\n          key={index}\n        >\n          <h1>{person.email}</h1>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>\n        <h2 style={{ marginBottom: \"0px\", marginTop: \"0px\" }}>Join Room</h2>\n      </div>\n\n      <div className={styles.roomList}>\n        {/* {activeConversations.length > 0 ? renderRooms() : null} */}\n      </div>\n    </div>\n  );\n};\n\nexport default RoomsList;\n"]},"metadata":{},"sourceType":"module"}