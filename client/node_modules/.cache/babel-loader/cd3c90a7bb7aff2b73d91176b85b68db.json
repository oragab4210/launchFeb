{"ast":null,"code":"import _regeneratorRuntime from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import styles from\"./ChatBox.module.css\";import React,{useState,useEffect,useRef}from\"react\";import{useMutation,useQuery,useLazyQuery}from\"@apollo/client\";import useChatRoom from\"../useChatRoom\";import useMessages from\"../useMessages\";import{useAppSelector,useAppDispatch}from\"../../../redux/hooks\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatBox=function ChatBox(_ref){var currentFriend=_ref.currentFriend,chooseRoomPage=_ref.chooseRoomPage,setChooseRoomPage=_ref.setChooseRoomPage;var messageRef=useRef();var _useMessages=useMessages(),messageList=_useMessages.messageList,addMessage=_useMessages.addMessage,setConvoId=_useMessages.setConvoId;var _useChatRoom=useChatRoom(messageList),messages=_useChatRoom.messages,sendMessage=_useChatRoom.sendMessage;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),newMessage=_useState2[0],setNewMessage=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),finalMessageList=_useState4[0],setFinalMessageList=_useState4[1];var room=useAppSelector(function(state){return state.currentRoom.value;});var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),firsTimeInChat=_useState6[0],setFirstTimeInChat=_useState6[1];var onlineUsers=useAppSelector(function(state){return state.onlineUsers.value;});/* -------------------------------------------------------------------------- */useEffect(function(){if(chooseRoomPage===true)setFirstTimeInChat(false);console.log(\"room\",chooseRoomPage);},[chooseRoomPage]);useEffect(function(){var scroll=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var delay,_messageRef$current,_messageRef$current2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:delay=function delay(ms){return new Promise(function(res){return setTimeout(res,ms);});};if(!(chooseRoomPage===false&&firsTimeInChat===false)){_context.next=8;break;}_context.next=4;return delay(400);case 4:(_messageRef$current=messageRef.current)===null||_messageRef$current===void 0?void 0:_messageRef$current.scrollIntoView({behavior:\"auto\"});setFirstTimeInChat(true);_context.next=9;break;case 8:if(chooseRoomPage===false){(_messageRef$current2=messageRef.current)===null||_messageRef$current2===void 0?void 0:_messageRef$current2.scrollIntoView({behavior:\"instant\"});}case 9:case\"end\":return _context.stop();}}},_callee);}));return function scroll(){return _ref2.apply(this,arguments);};}();scroll();});/* -------------------------------------------------------------------------- */var renderMessages=function renderMessages(){// ref={messageRef}\nvar listLength=messages.length;return messages.map(function(msg,index){if(index===listLength-1){return/*#__PURE__*/_jsx(\"p\",{ref:messageRef,className:\"\".concat(msg.isOwner?styles.blue:styles.red,\"\\n              \").concat(styles.msg),children:msg.body},index);}return/*#__PURE__*/_jsx(\"p\",{className:\"\".concat(msg.isOwner?styles.blue:styles.red,\" \\n          \").concat(styles.msg),children:msg.body},index);});};var onSubmit=function onSubmit(e){e.preventDefault();if(newMessage!==\"\"){sendMessage(newMessage);}// addMessage()\nsetNewMessage(\"\");};/* -------------------------------------------------------------------------- */return/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.friendNameContainer,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.backContainer,onClick:function onClick(){return setChooseRoomPage(!chooseRoomPage);},children:/*#__PURE__*/_jsxs(\"span\",{className:styles.backArrow,children:[/*#__PURE__*/_jsx(\"p\",{children:\" Rooms \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:\"\\u21A9\"})]})}),currentFriend?/*#__PURE__*/_jsx(\"h1\",{children:currentFriend.email}):null,currentFriend?onlineUsers.includes(currentFriend.id)?/*#__PURE__*/_jsx(\"div\",{className:styles.online}):/*#__PURE__*/_jsx(\"div\",{className:styles.offline}):null]}),/*#__PURE__*/_jsx(\"div\",{className:styles.messageContainer,children:room===\"\"?/*#__PURE__*/_jsxs(\"div\",{className:styles.noRoomMessageContainer,children:[\"Please Select a \",/*#__PURE__*/_jsx(\"br\",{}),\" Room To Join\"]}):/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{className:styles.messageList,children:renderMessages()})})}),/*#__PURE__*/_jsx(\"div\",{className:styles.inputBtnContainer,children:/*#__PURE__*/_jsxs(\"form\",{action:\"\",onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"\",id:\"\",placeholder:\"Start Chatting\",value:newMessage,onChange:function onChange(e){return setNewMessage(e.target.value);}}),/*#__PURE__*/_jsx(\"button\",{children:\"Send\"})]})})]});};export default ChatBox;","map":{"version":3,"sources":["/Users/omarragab/Documents/test/launchFeb/client/src/components/CHAT/ChatBox/ChatBox.js"],"names":["styles","React","useState","useEffect","useRef","useMutation","useQuery","useLazyQuery","useChatRoom","useMessages","useAppSelector","useAppDispatch","ChatBox","currentFriend","chooseRoomPage","setChooseRoomPage","messageRef","messageList","addMessage","setConvoId","messages","sendMessage","newMessage","setNewMessage","finalMessageList","setFinalMessageList","room","state","currentRoom","value","firsTimeInChat","setFirstTimeInChat","onlineUsers","console","log","scroll","delay","ms","Promise","res","setTimeout","current","scrollIntoView","behavior","renderMessages","listLength","length","map","msg","index","isOwner","blue","red","body","onSubmit","e","preventDefault","container","friendNameContainer","backContainer","backArrow","email","includes","id","online","offline","messageContainer","noRoomMessageContainer","inputBtnContainer","target"],"mappings":"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","sourcesContent":["import styles from \"./ChatBox.module.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nimport useChatRoom from \"../useChatRoom\";\nimport useMessages from \"../useMessages\";\nimport { useAppSelector, useAppDispatch } from \"../../../redux/hooks\";\n\nconst ChatBox = ({ currentFriend, chooseRoomPage, setChooseRoomPage }) => {\n  const messageRef = useRef();\n  const { messageList, addMessage, setConvoId } = useMessages();\n  const { messages, sendMessage } = useChatRoom(messageList);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [finalMessageList, setFinalMessageList] = useState(null);\n  const room = useAppSelector((state) => state.currentRoom.value);\n  const [firsTimeInChat, setFirstTimeInChat] = useState(false);\n  const onlineUsers = useAppSelector((state) => state.onlineUsers.value);\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    if (chooseRoomPage === true) setFirstTimeInChat(false);\n    console.log(\"room\", chooseRoomPage);\n  }, [chooseRoomPage]);\n\n  useEffect(() => {\n    const scroll = async () => {\n      const delay = (ms) => new Promise((res) => setTimeout(res, ms));\n      if (chooseRoomPage === false && firsTimeInChat === false) {\n        await delay(400);\n        messageRef.current?.scrollIntoView({ behavior: \"auto\" });\n        setFirstTimeInChat(true);\n      } else {\n        if (chooseRoomPage === false) {\n          messageRef.current?.scrollIntoView({ behavior: \"instant\" });\n        }\n      }\n    };\n    scroll();\n  });\n  /* -------------------------------------------------------------------------- */\n  const renderMessages = () => {\n    // ref={messageRef}\n    const listLength = messages.length;\n    return messages.map((msg, index) => {\n      if (index === listLength - 1) {\n        return (\n          <p\n            key={index}\n            ref={messageRef}\n            className={`${msg.isOwner ? styles.blue : styles.red}\n              ${styles.msg}`}\n          >\n            {msg.body}\n          </p>\n        );\n      }\n      return (\n        <p\n          key={index}\n          className={`${msg.isOwner ? styles.blue : styles.red} \n          ${styles.msg}`}\n        >\n          {msg.body}\n        </p>\n      );\n    });\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (newMessage !== \"\") {\n      sendMessage(newMessage);\n    }\n    // addMessage()\n    setNewMessage(\"\");\n  };\n  /* -------------------------------------------------------------------------- */\n  return (\n    <div className={styles.container}>\n      <div className={styles.friendNameContainer}>\n        <div\n          className={styles.backContainer}\n          onClick={() => setChooseRoomPage(!chooseRoomPage)}\n        >\n          <span className={styles.backArrow}>\n            <p> Rooms </p> <span>&#x21A9;</span>\n          </span>\n        </div>\n\n        {currentFriend ? <h1>{currentFriend.email}</h1> : null}\n\n        {currentFriend ? (\n          onlineUsers.includes(currentFriend.id) ? (\n            <div className={styles.online}></div>\n          ) : (\n            <div className={styles.offline}></div>\n          )\n        ) : null}\n      </div>\n      <div className={styles.messageContainer}>\n        {room === \"\" ? (\n          <div className={styles.noRoomMessageContainer}>\n            Please Select a <br /> Room To Join\n          </div>\n        ) : (\n          <div>\n            <div className={styles.messageList}>\n              {/* messages here */}\n              {renderMessages()}\n              {/* <div ref={messageRef}>{}</div> */}\n            </div>\n          </div>\n        )}\n\n        {/* -------------------------------------------------------------------------- */}\n      </div>\n      <div className={styles.inputBtnContainer}>\n        <form action=\"\" onSubmit={onSubmit}>\n          <input\n            type=\"text\"\n            name=\"\"\n            id=\"\"\n            placeholder=\"Start Chatting\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n          />\n          <button>Send</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}