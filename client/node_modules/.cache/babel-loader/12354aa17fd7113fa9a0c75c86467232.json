{"ast":null,"code":"import _regeneratorRuntime from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/omarragab/Documents/test/launchFeb/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState,useCallback}from\"react\";// import { create } from \"ipfs-http-client\";\n// const ipfs = create({\n//   host: \"ipfs.infura.io\",\n//   port: 5001,\n//   protocol: \"https\",\n// });\nimport{create as ipfsHttpClient}from\"ipfs-http-client\";var client=ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");var useIPFS=function useIPFS(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),ipfsBuffer=_useState2[0],setIPFSBuffer=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),fileUrl=_useState4[0],setFileUrl=_useState4[1];/* ----------------------------------IPFS--------------------------------- */var captureFile=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var file,reader;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();console.log(\"File captured\");file=e.target.files[0];reader=new window.FileReader();console.log(file);reader.readAsArrayBuffer(file);reader.onloadend=function(){setIPFSBuffer(Buffer(reader.result));console.log(\"Buffer\",Buffer(reader.result));};return _context.abrupt(\"return\",ipfsBuffer);case 8:case\"end\":return _context.stop();}}},_callee);}));return function captureFile(_x){return _ref.apply(this,arguments);};}();// const captureJSON = () => {\n//   // e.preventDefault();\n//   console.log(\"File captured\");\n//   const stuff = data;\n//   const str = JSON.stringify(stuff);\n//   const bytes = new TextEncoder().encode(str);\n//   const blob = new Blob([bytes], {\n//     type: \"application/json;charset=utf-8\",\n//   });\n//   const reader = new window.FileReader();\n//   reader.readAsArrayBuffer(blob);\n//   reader.onloadend = () => {\n//     setIPFSBuffer(Buffer(reader.result));\n//     console.log(\"Buffer\", Buffer(reader.result));\n//   };\n//   return Buffer(reader.result);\n// };\n// const ipfsSubmit = async (e) => {\n//   e.preventDefault();\n//   console.log(\"Submitting to IPFS\");\n//   const result = await ipfs.add(ipfsBuffer);\n//   console.log(\"IPFS RESULT:\", result.path);\n//   const picHash = result.path;\n//   console.log(result.path);\n//   return `https://ipfs.infura.io/ipfs/${picHash}`;\n//   /* -------------------------------------------------------------------------- */\n//   /* --------------------------- store on blockchain -------------------------- */\n//   // Step 2: store file on blockchain\n//   //  await contract.methods\n//   //  .set(picHash)\n//   //  .send({\n//   //    from: account,\n//   //  })\n//   //  .then((res) => setPichash(picHash));\n// };\n//   const renderIPFSImage = () => {\n//     return `https://ipfs.infura.io/ipfs/${picHash}`;\n// };\n/* -------------------------------------------------------------------------- */ /* -------------------------------------------------------------------------- */var captureFileAndUploadToIPFS=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var file,added,url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:file=e.target.files[0];_context2.prev=1;_context2.next=4;return client.add(file,{progress:function progress(prog){return console.log(\"received: \".concat(prog));}});case 4:added=_context2.sent;url=\"https://ipfs.infura.io/ipfs/\".concat(added.path);setFileUrl(url);console.log(url);return _context2.abrupt(\"return\",url);case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](1);console.log(\"Error uploading file: \",_context2.t0);case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[1,11]]);}));return function captureFileAndUploadToIPFS(_x2){return _ref2.apply(this,arguments);};}();var uploadToIPFS=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data){var added,url;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return client.add(data);case 3:added=_context3.sent;url=\"https://ipfs.infura.io/ipfs/\".concat(added.path);return _context3.abrupt(\"return\",url);case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);console.log(\"Error uploading file: \",_context3.t0);case 11:case\"end\":return _context3.stop();}}},_callee3,null,[[0,8]]);}));return function uploadToIPFS(_x3){return _ref3.apply(this,arguments);};}();/* -------------------------------------------------------------------------- */return{// web3Modal_address_abi,\n// ethers_address_abi,\ncaptureFile:captureFile,// captureJSON,\n// ipfsSubmit,\nuploadToIPFS:uploadToIPFS,captureFileAndUploadToIPFS:captureFileAndUploadToIPFS};};export default useIPFS;","map":{"version":3,"sources":["/Users/omarragab/Documents/test/launchFeb/client/src/utils/useIPFS.js"],"names":["React","useEffect","useRef","useState","useCallback","create","ipfsHttpClient","client","useIPFS","ipfsBuffer","setIPFSBuffer","fileUrl","setFileUrl","captureFile","e","preventDefault","console","log","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","captureFileAndUploadToIPFS","add","progress","prog","added","url","path","uploadToIPFS","data"],"mappings":"kfAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,CAA6CC,WAA7C,KAAgE,OAAhE,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAASC,MAAM,GAAIC,CAAAA,cAAnB,KAAyC,kBAAzC,CACA,GAAMC,CAAAA,MAAM,CAAGD,cAAc,CAAC,oCAAD,CAA7B,CAEA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,cAAoCL,QAAQ,CAAC,IAAD,CAA5C,wCAAOM,UAAP,eAAmBC,aAAnB,eACA,eAA8BP,QAAQ,CAAC,IAAD,CAAtC,yCAAOQ,OAAP,eAAgBC,UAAhB,eACA,6EACA,GAAMC,CAAAA,WAAW,0FAAG,iBAAOC,CAAP,kIAClBA,CAAC,CAACC,cAAF,GACAC,OAAO,CAACC,GAAR,CAAY,eAAZ,EACMC,IAHY,CAGLJ,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAHK,CAIZC,MAJY,CAIH,GAAIC,CAAAA,MAAM,CAACC,UAAX,EAJG,CAKlBP,OAAO,CAACC,GAAR,CAAYC,IAAZ,EACAG,MAAM,CAACG,iBAAP,CAAyBN,IAAzB,EACAG,MAAM,CAACI,SAAP,CAAmB,UAAM,CACvBf,aAAa,CAACgB,MAAM,CAACL,MAAM,CAACM,MAAR,CAAP,CAAb,CACAX,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAsBS,MAAM,CAACL,MAAM,CAACM,MAAR,CAA5B,EACD,CAHD,CAPkB,gCAWXlB,UAXW,wDAAH,kBAAXI,CAAAA,WAAW,4CAAjB,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAxDoB,CA0DpB,gFACA,GAAMe,CAAAA,0BAA0B,2FAAG,kBAAOd,CAAP,yIAC3BI,IAD2B,CACpBJ,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CADoB,yCAGXb,CAAAA,MAAM,CAACsB,GAAP,CAAWX,IAAX,CAAiB,CACnCY,QAAQ,CAAE,kBAACC,IAAD,QAAUf,CAAAA,OAAO,CAACC,GAAR,qBAAyBc,IAAzB,EAAV,EADyB,CAAjB,CAHW,QAGzBC,KAHyB,gBAMzBC,GANyB,uCAMYD,KAAK,CAACE,IANlB,EAO/BtB,UAAU,CAACqB,GAAD,CAAV,CACAjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,EAR+B,iCASxBA,GATwB,+DAW/BjB,OAAO,CAACC,GAAR,CAAY,wBAAZ,eAX+B,uEAAH,kBAA1BW,CAAAA,0BAA0B,8CAAhC,CAeA,GAAMO,CAAAA,YAAY,2FAAG,kBAAOC,IAAP,4KAEG7B,CAAAA,MAAM,CAACsB,GAAP,CAAWO,IAAX,CAFH,QAEXJ,KAFW,gBAGXC,GAHW,uCAG0BD,KAAK,CAACE,IAHhC,mCAIVD,GAJU,6DAMjBjB,OAAO,CAACC,GAAR,CAAY,wBAAZ,eANiB,sEAAH,kBAAZkB,CAAAA,YAAY,8CAAlB,CASA,gFACA,MAAO,CACL;AACA;AACAtB,WAAW,CAAXA,WAHK,CAIL;AACA;AACAsB,YAAY,CAAZA,YANK,CAOLP,0BAA0B,CAA1BA,0BAPK,CAAP,CASD,CA7FD,CA+FA,cAAepB,CAAAA,OAAf","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from \"react\";\n\n// import { create } from \"ipfs-http-client\";\n// const ipfs = create({\n//   host: \"ipfs.infura.io\",\n//   port: 5001,\n//   protocol: \"https\",\n// });\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nconst useIPFS = () => {\n  const [ipfsBuffer, setIPFSBuffer] = useState(null);\n  const [fileUrl, setFileUrl] = useState(null);\n  /* ----------------------------------IPFS--------------------------------- */\n  const captureFile = async (e) => {\n    e.preventDefault();\n    console.log(\"File captured\");\n    const file = e.target.files[0];\n    const reader = new window.FileReader();\n    console.log(file);\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      setIPFSBuffer(Buffer(reader.result));\n      console.log(\"Buffer\", Buffer(reader.result));\n    };\n    return ipfsBuffer;\n  };\n  // const captureJSON = () => {\n  //   // e.preventDefault();\n  //   console.log(\"File captured\");\n  //   const stuff = data;\n  //   const str = JSON.stringify(stuff);\n  //   const bytes = new TextEncoder().encode(str);\n  //   const blob = new Blob([bytes], {\n  //     type: \"application/json;charset=utf-8\",\n  //   });\n  //   const reader = new window.FileReader();\n  //   reader.readAsArrayBuffer(blob);\n  //   reader.onloadend = () => {\n  //     setIPFSBuffer(Buffer(reader.result));\n  //     console.log(\"Buffer\", Buffer(reader.result));\n  //   };\n  //   return Buffer(reader.result);\n  // };\n  // const ipfsSubmit = async (e) => {\n  //   e.preventDefault();\n  //   console.log(\"Submitting to IPFS\");\n\n  //   const result = await ipfs.add(ipfsBuffer);\n  //   console.log(\"IPFS RESULT:\", result.path);\n  //   const picHash = result.path;\n  //   console.log(result.path);\n  //   return `https://ipfs.infura.io/ipfs/${picHash}`;\n  //   /* -------------------------------------------------------------------------- */\n  //   /* --------------------------- store on blockchain -------------------------- */\n  //   // Step 2: store file on blockchain\n  //   //  await contract.methods\n  //   //  .set(picHash)\n  //   //  .send({\n  //   //    from: account,\n  //   //  })\n  //   //  .then((res) => setPichash(picHash));\n  // };\n  //   const renderIPFSImage = () => {\n  //     return `https://ipfs.infura.io/ipfs/${picHash}`;\n  // };\n  /* -------------------------------------------------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  const captureFileAndUploadToIPFS = async (e) => {\n    const file = e.target.files[0];\n    try {\n      const added = await client.add(file, {\n        progress: (prog) => console.log(`received: ${prog}`),\n      });\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      setFileUrl(url);\n      console.log(url);\n      return url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n\n  const uploadToIPFS = async (data) => {\n    try {\n      const added = await client.add(data);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      return url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n  /* -------------------------------------------------------------------------- */\n  return {\n    // web3Modal_address_abi,\n    // ethers_address_abi,\n    captureFile,\n    // captureJSON,\n    // ipfsSubmit,\n    uploadToIPFS,\n    captureFileAndUploadToIPFS,\n  };\n};\n\nexport default useIPFS;\n"]},"metadata":{},"sourceType":"module"}